%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: node_counts_cleaned.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: fwood
%%CreationDate: 4/25/2009
%%BoundingBox: 0 0 446 331
%%HiResBoundingBox: 0 0 445.4136 330.1006
%%CropBox: 0 0 445.4136 330.1006
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.351735, 2008/07/22-18:11:12        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2009-04-25T17:28:55+01:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqkTeb7Ieah5Y&#xA;+qXZ1EoJw/pr6JtuFTcepy+wJP3RH2uf7PH4sVS/XPOuoaXfa1bnTVePTbGC7s2MoBuHuJXhAagb&#xA;00DIN6E9dsVRXl68m1u4mk1OKNL7y/eTWbxRBZIDO0MbrcxNLH6yOIJ2QcWAo7g8tqKsjxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvNPzb8yzaNd6Y1&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -330.101 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 330.101 li
445.414 330.101 li
445.414 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
44.9331 296.117 mo
44.9331 292.117 li
44.9331 296.117 mo
44.9331 22.0332 li
44.9331 296.117 mo
440.1 296.117 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
44.6001 305.752 mo
44.6001 313.8 li
46 313.8 li
46 302.5 li
45.084 302.5 li
44.5952 304.237 44.2788 304.478 42.1318 304.748 cv
42.1318 305.752 li
44.6001 305.752 li
cp
f
123.933 296.117 mo
123.933 292.117 li
@
127.618 312.4 mo
121.633 312.4 li
121.777 311.478 122.291 310.889 123.687 310.077 cv
125.292 309.218 li
126.881 308.359 127.701 307.197 127.701 305.813 cv
127.701 304.874 127.315 303.999 126.641 303.395 cv
125.967 302.789 125.132 302.501 124.057 302.501 cv
122.612 302.501 121.537 303.008 120.911 303.957 cv
120.51 304.559 120.333 305.254 120.301 306.394 cv
121.724 306.394 li
121.772 305.629 121.87 305.166 122.063 304.8 cv
122.435 304.115 123.179 303.7 124.036 303.7 cv
125.33 303.7 126.3 304.611 126.3 305.826 cv
126.3 306.721 125.766 307.488 124.748 308.063 cv
123.261 308.895 li
120.869 310.236 120.174 311.308 120.045 313.8 cv
127.619 313.8 li
127.618 312.4 li
cp
f
202.933 296.117 mo
202.933 292.117 li
@
202.036 308.601 mo
202.815 308.601 li
204.388 308.601 205.2 309.315 205.2 310.695 cv
205.2 312.141 204.313 313 202.831 313 cv
201.284 313 200.527 312.207 200.43 310.504 cv
199.012 310.504 li
199.076 311.425 199.236 312.022 199.508 312.538 cv
200.084 313.635 201.205 314.2 202.758 314.2 cv
205.095 314.2 206.6 312.811 206.6 310.668 cv
206.6 309.23 206.039 308.432 204.676 307.967 cv
205.692 307.551 206.2 306.753 206.2 305.618 cv
206.2 303.668 204.923 302.5 202.796 302.5 cv
200.544 302.5 199.347 303.734 199.3 306.12 cv
200.7 306.12 li
200.716 305.437 200.779 305.054 200.952 304.704 cv
201.267 304.083 201.961 303.7 202.828 303.7 cv
204.058 303.7 204.8 304.435 204.8 305.63 cv
204.8 306.427 204.514 306.906 203.894 307.161 cv
203.513 307.32 203.021 307.384 202.036 307.4 cv
202.036 308.601 li
cp
f
282.016 296.117 mo
282.016 292.117 li
@
282.799 309.8 mo
279.28 309.8 li
282.799 304.856 li
282.799 309.8 li
cp
282.799 311 mo
282.799 313.8 li
284.2 313.8 li
284.2 311 li
285.92 311 li
285.92 309.8 li
284.2 309.8 li
284.2 302.5 li
283.167 302.5 li
278.047 309.534 li
278.047 311 li
282.799 311 li
cp
f
361.016 296.117 mo
361.016 292.117 li
@
364.208 302.5 mo
358.36 302.5 li
357.512 308.632 li
358.815 308.632 li
359.475 307.866 360.022 307.601 360.907 307.601 cv
362.434 307.601 363.401 308.652 363.401 310.35 cv
363.401 311.998 362.452 313 360.907 313 cv
359.668 313 358.913 312.351 358.575 311.017 cv
357.161 311.017 li
357.35 311.954 357.512 312.406 357.846 312.827 cv
358.487 313.7 359.637 314.2 360.915 314.2 cv
363.2 314.2 364.799 312.545 364.799 310.157 cv
364.799 307.928 363.313 306.4 361.139 306.4 cv
360.34 306.4 359.702 306.586 359.045 307.017 cv
359.495 303.9 li
364.208 303.9 li
364.208 302.5 li
cp
f
440.1 296.117 mo
440.1 292.117 li
@
440.276 308 mo
441.645 308 442.5 308.959 442.5 310.5 cv
442.5 311.945 441.532 313 440.227 313 cv
438.907 313 437.909 311.896 437.909 310.42 cv
437.909 308.991 438.875 308 440.276 308 cv
440.276 308 li
cp
443.668 305.4 mo
443.397 303.582 442.182 302.5 440.458 302.5 cv
439.211 302.5 438.092 303.11 437.422 304.116 cv
436.719 305.219 436.401 306.609 436.401 308.67 cv
436.401 310.572 436.688 311.786 437.358 312.793 cv
437.963 313.704 438.954 314.199 440.198 314.199 cv
442.35 314.199 443.899 312.604 443.899 310.389 cv
443.899 308.283 442.454 306.799 440.415 306.799 cv
439.292 306.799 438.409 307.209 437.799 307.999 cv
437.815 305.234 438.715 303.699 440.338 303.699 cv
441.334 303.699 442.028 304.319 442.252 305.399 cv
443.668 305.4 li
cp
f
44.9331 296.117 mo
48.8501 296.117 li
@
37.6001 291.9 mo
39.1392 291.9 39.8999 293.438 39.8999 296.479 cv
39.8999 299.696 39.1538 301.2 37.5669 301.2 cv
36.061 301.2 35.2998 299.632 35.2998 296.527 cv
35.2998 293.422 36.061 291.9 37.6001 291.9 cv
37.6001 291.9 li
cp
37.5991 290.7 mo
36.5469 290.7 35.5898 291.146 35 291.9 cv
34.2671 292.896 33.8999 294.421 33.8999 296.524 cv
33.8999 300.361 35.1758 302.4 37.5991 302.4 cv
39.9912 302.4 41.2998 300.361 41.2998 296.62 cv
41.2998 294.404 40.9482 292.927 40.1982 291.9 cv
39.6079 291.131 38.667 290.7 37.5991 290.7 cv
37.5991 290.7 li
cp
f
44.9331 250.367 mo
48.8501 250.367 li
@
24.2998 246.2 mo
25.8389 246.2 26.6001 247.738 26.6001 250.779 cv
26.6001 253.996 25.854 255.5 24.2671 255.5 cv
22.7607 255.5 22 253.933 22 250.827 cv
22 247.723 22.7607 246.2 24.2998 246.2 cv
24.2998 246.2 li
cp
24.2988 245 mo
23.2471 245 22.29 245.446 21.7002 246.2 cv
20.9668 247.196 20.6001 248.721 20.6001 250.824 cv
20.6001 254.661 21.876 256.7 24.2988 256.7 cv
26.6909 256.7 28 254.661 28 250.92 cv
28 248.704 27.6479 247.228 26.8979 246.2 cv
26.3081 245.432 25.3672 245 24.2988 245 cv
24.2988 245 li
cp
f
30.1001 256.3 mo
31.7998 256.3 li
31.7998 254.601 li
30.1001 254.601 li
30.1001 256.3 li
cp
f
40.8081 245 mo
34.959 245 li
34.1118 251.132 li
35.415 251.132 li
36.0752 250.366 36.6221 250.101 37.5059 250.101 cv
39.0342 250.101 40 251.152 40 252.85 cv
40 254.498 39.0508 255.5 37.5068 255.5 cv
36.269 255.5 35.5132 254.851 35.1748 253.517 cv
33.7598 253.517 li
33.9512 254.454 34.1118 254.906 34.4468 255.327 cv
35.0859 256.2 36.2368 256.7 37.5151 256.7 cv
39.7998 256.7 41.3999 255.045 41.3999 252.657 cv
41.3999 250.428 39.9131 248.9 37.7388 248.9 cv
36.9399 248.9 36.3008 249.086 35.646 249.517 cv
36.0938 246.4 li
40.8081 246.4 li
40.8081 245 li
cp
f
44.9331 204.7 mo
48.8501 204.7 li
@
37.2998 202.552 mo
37.2998 210.601 li
38.7002 210.601 li
38.7002 199.3 li
37.7842 199.3 li
37.2949 201.037 36.979 201.277 34.832 201.548 cv
34.832 202.552 li
37.2998 202.552 li
cp
f
44.9331 159.033 mo
48.8501 159.033 li
@
24 156.853 mo
24 164.9 li
25.3999 164.9 li
25.3999 153.601 li
24.4839 153.601 li
23.9951 155.337 23.6792 155.577 21.5322 155.849 cv
21.5322 156.853 li
24 156.853 li
cp
f
30.1001 164.9 mo
31.7998 164.9 li
31.7998 163.2 li
30.1001 163.2 li
30.1001 164.9 li
cp
f
40.8081 153.601 mo
34.959 153.601 li
34.1118 159.732 li
35.415 159.732 li
36.0752 158.966 36.6221 158.7 37.5059 158.7 cv
39.0342 158.7 40 159.752 40 161.449 cv
40 163.099 39.0508 164.101 37.5068 164.101 cv
36.269 164.101 35.5132 163.45 35.1748 162.116 cv
33.7598 162.116 li
33.9512 163.054 34.1118 163.506 34.4468 163.927 cv
35.0859 164.8 36.2368 165.3 37.5151 165.3 cv
39.7998 165.3 41.3999 163.646 41.3999 161.257 cv
41.3999 159.028 39.9131 157.5 37.7388 157.5 cv
36.9399 157.5 36.3008 157.687 35.646 158.116 cv
36.0938 155 li
40.8081 155 li
40.8081 153.601 li
cp
f
44.9331 113.366 mo
48.8501 113.366 li
@
41.3179 117.9 mo
35.333 117.9 li
35.4771 116.977 35.9912 116.388 37.3872 115.577 cv
38.9922 114.718 li
40.5811 113.859 41.4009 112.697 41.4009 111.313 cv
41.4009 110.374 41.0151 109.499 40.3408 108.894 cv
39.667 108.289 38.832 108.001 37.7568 108.001 cv
36.312 108.001 35.2368 108.508 34.6108 109.457 cv
34.21 110.058 34.0332 110.754 34.001 111.893 cv
35.4238 111.893 li
35.4722 111.129 35.5698 110.666 35.7632 110.3 cv
36.1348 109.615 36.8789 109.2 37.7358 109.2 cv
39.0298 109.2 40 110.111 40 111.326 cv
40 112.221 39.4658 112.988 38.4478 113.563 cv
36.9609 114.394 li
34.5688 115.736 33.874 116.807 33.7451 119.3 cv
41.3188 119.3 li
41.3179 117.9 li
cp
f
44.9331 67.7002 mo
48.8501 67.7002 li
@
28.0181 72.2002 mo
22.0332 72.2002 li
22.1768 71.2773 22.6909 70.688 24.0869 69.877 cv
25.6919 69.0181 li
27.2813 68.1592 28.1011 66.9971 28.1011 65.6133 cv
28.1011 64.6743 27.7148 63.7993 27.041 63.1943 cv
26.3672 62.5894 25.5322 62.3013 24.457 62.3013 cv
23.0122 62.3013 21.937 62.8081 21.311 63.7573 cv
20.9102 64.3584 20.7329 65.0542 20.7012 66.1934 cv
22.124 66.1934 li
22.1719 65.4292 22.27 64.9663 22.4629 64.6001 cv
22.835 63.915 23.5791 63.5 24.436 63.5 cv
25.73 63.5 26.7002 64.4111 26.7002 65.626 cv
26.7002 66.521 26.166 67.2881 25.1479 67.8633 cv
23.6611 68.6943 li
21.269 70.0361 20.5742 71.1074 20.4448 73.6001 cv
28.019 73.6001 li
28.0181 72.2002 li
cp
f
30.1001 73.6001 mo
31.7998 73.6001 li
31.7998 71.9004 li
30.1001 71.9004 li
30.1001 73.6001 li
cp
f
40.8081 62.3003 mo
34.959 62.3003 li
34.1118 68.4321 li
35.415 68.4321 li
36.0752 67.666 36.6221 67.4004 37.5059 67.4004 cv
39.0342 67.4004 40 68.4521 40 70.1494 cv
40 71.7983 39.0508 72.8003 37.5068 72.8003 cv
36.269 72.8003 35.5132 72.1504 35.1748 70.8164 cv
33.7598 70.8164 li
33.9512 71.7539 34.1118 72.2061 34.4468 72.627 cv
35.0859 73.5 36.2368 74 37.5151 74 cv
39.7998 74 41.3999 72.3452 41.3999 69.957 cv
41.3999 67.728 39.9131 66.2002 37.7388 66.2002 cv
36.9399 66.2002 36.3008 66.3862 35.646 66.8164 cv
36.0938 63.7002 li
40.8081 63.7002 li
40.8081 62.3003 li
cp
f
44.9331 22.0332 mo
48.8501 22.0332 li
@
36.7358 22.7002 mo
37.5151 22.7002 li
39.0879 22.7002 39.8999 23.415 39.8999 24.7949 cv
39.8999 26.2402 39.0132 27.1001 37.5313 27.1001 cv
35.9839 27.1001 35.2271 26.3071 35.1299 24.604 cv
33.7119 24.604 li
33.7759 25.5254 33.936 26.1221 34.208 26.6382 cv
34.7842 27.7354 35.9048 28.3003 37.458 28.3003 cv
39.7949 28.3003 41.2998 26.9102 41.2998 24.7681 cv
41.2998 23.3301 40.7393 22.5313 39.376 22.0674 cv
40.3921 21.6514 40.8999 20.853 40.8999 19.7183 cv
40.8999 17.7681 39.623 16.6001 37.4961 16.6001 cv
35.2441 16.6001 34.0469 17.834 34 20.2202 cv
35.3999 20.2202 li
35.416 19.5361 35.479 19.1543 35.6519 18.8042 cv
35.9668 18.1831 36.6611 17.8003 37.5278 17.8003 cv
38.7578 17.8003 39.5 18.5342 39.5 19.73 cv
39.5 20.5273 39.2139 21.0063 38.5938 21.2612 cv
38.2129 21.4199 37.7212 21.4844 36.7358 21.5 cv
36.7358 22.7002 li
cp
f
49.5718 13.1572 mo
52.3882 9.1001 li
50.8838 9.1001 li
48.8682 12.1563 li
46.8521 9.1001 li
45.332 9.1001 li
48.1318 13.2212 li
45.1719 17.5 li
46.6919 17.5 li
48.8198 14.2842 li
50.916 17.5 li
52.4678 17.5 li
49.5718 13.1572 li
cp
f
61.5 9.45215 mo
61.5 17.5 li
62.8999 17.5 li
62.8999 6.2002 li
61.9839 6.2002 li
61.4951 7.93701 61.1792 8.17725 59.0322 8.44824 cv
59.0322 9.45215 li
61.5 9.45215 li
cp
f
70.7002 7.40039 mo
72.2388 7.40039 73 8.93799 73 11.979 cv
73 15.1963 72.2539 16.7002 70.667 16.7002 cv
69.1611 16.7002 68.3999 15.1323 68.3999 12.0273 cv
68.3999 8.92236 69.1611 7.40039 70.7002 7.40039 cv
70.7002 7.40039 li
cp
70.6992 6.2002 mo
69.647 6.2002 68.6899 6.646 68.1001 7.40039 cv
67.3672 8.396 67 9.9209 67 12.0244 cv
67 15.8613 68.2759 17.9004 70.6992 17.9004 cv
73.0908 17.9004 74.3999 15.8613 74.3999 12.1201 cv
74.3999 9.9043 74.0479 8.42725 73.2979 7.40039 cv
72.708 6.63135 71.7671 6.2002 70.6992 6.2002 cv
70.6992 6.2002 li
cp
f
75.5 7.6001 mo
75.5 9.77516e-5 li
80.6 9.77516e-5 li
80.6 7.6001 li
cp
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 0 330.101 ]ct
[5.1 0 0 -7.6 75.5 330.1 ]ct
<<
/T 1
/W 51 
/H 76 
/M[51 0 0 -76 0 76 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
sepimg
!rq0`rr3)Ys54.]rr_3Zi!98]"5s4K#QF`*i;`9Krr3)Ys6p-irr_3Zn,r[i"5s4S"9/<&i;`QSrr3)Y
s7cWorr_3Zp]:Bo"5s4W!WN*$i;`]Urr3)Ys82lrrr_3ZrW)rt"5s4Y!<3!/i;`cVJ,fQ,s8E"Js8V$W
IfBCts8V$Wrr@QKs5<qW!'gM`i;`h-5QCcAs8RU6s8V$Ws1f`Vs5<qW^`WUVi;`hm&-)[fs8V!fs8V$W
s54Ffs5<qWn-B!ni;`iH#QOh^s8VQns8V$Ws7c]rs5<qWp]LQri;`iT!WW2Xs8Vuts8V$Ws8E#us5<qW
"TAE$s5<nV!s!iNi;W`Y!.Y%,rr3(N5QB[@rr[d9s5<nV"2H#Yi;W`Y^`WU7rr3)Y&-(Serr_0is5<nV
"7QQqi;W`Yp]piWrr3)q"97<Yrr`0$s5<nV"8i3"i;W`YrW)uVrVlp!s5<kU!W[`.rVlqLJ)L>+"93m9
i;NZW^`VM5rrV+#i;NZWi"+cErrVZpi;NZWp]oaUrrVrti;NZWquPaSrrW0#i;NZWrW(mSrrE+-r;QeJ
+T26@J09C>!!%QH!!%QH!!%QH!!%QH!!%QK!<)ruJGT<HJGT<HJGT=s~>

%%EndBinary
grestore
np
f
2 lw
[.5 4 ] 0 dsh
44.9331 138.866 mo
440.1 138.866 li
44.9331 175.116 mo
440.1 175.116 li
44.9331 247.95 mo
440.1 247.95 li
44.9331 272.2 mo
440.1 272.2 li
44.9331 291.45 mo
440.1 291.45 li
0 0 0 1 cmyk
@
.5 lw
[] 0 dsh
445.1 285.95 mo
445.1 288.711 442.862 290.95 440.1 290.95 cv
437.338 290.95 435.1 288.711 435.1 285.95 cv
435.1 283.189 437.338 280.95 440.1 280.95 cv
442.862 280.95 445.1 283.189 445.1 285.95 cv
366.016 288.95 mo
366.016 291.711 363.778 293.95 361.016 293.95 cv
358.256 293.95 356.016 291.711 356.016 288.95 cv
356.016 286.189 358.256 283.95 361.016 283.95 cv
363.778 283.95 366.016 286.189 366.016 288.95 cv
287.016 291.783 mo
287.016 294.544 284.778 296.783 282.016 296.783 cv
279.256 296.783 277.016 294.544 277.016 291.783 cv
277.016 289.022 279.256 286.783 282.016 286.783 cv
284.778 286.783 287.016 289.022 287.016 291.783 cv
207.933 294.367 mo
207.933 297.128 205.694 299.367 202.933 299.367 cv
200.172 299.367 197.933 297.128 197.933 294.367 cv
197.933 291.606 200.172 289.367 202.933 289.367 cv
205.694 289.367 207.933 291.606 207.933 294.367 cv
128.933 295.867 mo
128.933 298.628 126.694 300.867 123.933 300.867 cv
121.172 300.867 118.933 298.628 118.933 295.867 cv
118.933 293.106 121.172 290.867 123.933 290.867 cv
126.694 290.867 128.933 293.106 128.933 295.867 cv
49.9331 296.033 mo
49.9331 298.794 47.6938 301.033 44.9331 301.033 cv
42.1719 301.033 39.9331 298.794 39.9331 296.033 cv
39.9331 293.272 42.1719 291.033 44.9331 291.033 cv
47.6938 291.033 49.9331 293.272 49.9331 296.033 cv
@
0 lj
440.1 45.7002 mo
440.1 55.7002 li
435.1 50.7002 mo
445.1 50.7002 li
361.016 136.116 mo
361.016 146.116 li
356.016 141.116 mo
366.016 141.116 li
282.016 215.95 mo
282.016 225.95 li
277.016 220.95 mo
287.016 220.95 li
202.933 270.533 mo
202.933 280.533 li
197.933 275.533 mo
207.933 275.533 li
123.933 289.7 mo
123.933 299.7 li
118.933 294.7 mo
128.933 294.7 li
44.9331 291.033 mo
44.9331 301.033 li
39.9331 296.033 mo
49.9331 296.033 li
436.182 105.617 mo
444.016 105.617 li
444.016 97.7837 li
436.182 97.7837 li
436.182 105.617 li
cp
357.1 176.033 mo
364.934 176.033 li
364.934 168.2 li
357.1 168.2 li
357.1 176.033 li
cp
278.1 238.867 mo
285.934 238.867 li
285.934 231.033 li
278.1 231.033 li
278.1 238.867 li
cp
199.017 282.783 mo
206.85 282.783 li
206.85 274.95 li
199.017 274.95 li
199.017 282.783 li
cp
120.017 298.783 mo
127.85 298.783 li
127.85 290.95 li
120.017 290.95 li
120.017 298.783 li
cp
41.0171 299.95 mo
48.8501 299.95 li
48.8501 292.117 li
41.0171 292.117 li
41.0171 299.95 li
cp
443.6 209.033 mo
436.6 216.033 li
436.6 209.033 mo
443.6 216.033 li
364.516 237.617 mo
357.516 244.617 li
357.516 237.617 mo
364.516 244.617 li
285.516 263.867 mo
278.516 270.867 li
278.516 263.867 mo
285.516 270.867 li
206.433 283.617 mo
199.433 290.617 li
199.433 283.617 mo
206.433 290.617 li
127.433 291.867 mo
120.433 298.867 li
120.433 291.867 mo
127.433 298.867 li
48.4331 292.533 mo
41.4331 299.533 li
41.4331 292.533 mo
48.4331 299.533 li
440.1 258.7 mo
445.1 252.117 li
440.1 245.533 li
435.1 252.117 li
440.1 258.7 li
440.1 258.7 li
cp
361.016 273.117 mo
366.016 266.533 li
361.016 259.95 li
356.016 266.533 li
361.016 273.117 li
361.016 273.117 li
cp
282.016 286.533 mo
287.016 279.95 li
282.016 273.367 li
277.016 279.95 li
282.016 286.533 li
282.016 286.533 li
cp
202.933 297.2 mo
207.933 290.617 li
202.933 284.033 li
197.933 290.617 li
202.933 297.2 li
202.933 297.2 li
cp
123.933 302.117 mo
128.933 295.533 li
123.933 288.95 li
118.933 295.533 li
123.933 302.117 li
123.933 302.117 li
cp
44.9331 302.617 mo
49.9331 296.033 li
44.9331 289.45 li
39.9331 296.033 li
44.9331 302.617 li
44.9331 302.617 li
cp
@
2 lw
44.9331 296.033 mo
123.933 294.7 li
202.933 275.533 li
282.016 220.95 li
361.016 141.117 li
440.1 50.7002 li
44.9331 296.033 mo
123.933 294.867 li
202.933 278.867 li
282.016 234.95 li
361.016 172.117 li
440.1 101.7 li
44.9331 296.033 mo
123.933 295.367 li
202.933 287.117 li
282.016 267.367 li
361.016 241.117 li
440.1 212.533 li
44.9331 296.033 mo
123.933 295.533 li
202.933 290.617 li
282.016 279.95 li
361.016 266.533 li
440.1 252.117 li
44.9331 296.033 mo
123.933 295.867 li
202.933 294.367 li
282.016 291.783 li
361.016 288.95 li
440.1 285.95 li
@
.5 lw
445.1 291.45 mo
445.1 294.211 442.862 296.45 440.1 296.45 cv
437.338 296.45 435.1 294.211 435.1 291.45 cv
435.1 288.689 437.338 286.45 440.1 286.45 cv
442.862 286.45 445.1 288.689 445.1 291.45 cv
366.016 291.45 mo
366.016 294.211 363.778 296.45 361.016 296.45 cv
358.256 296.45 356.016 294.211 356.016 291.45 cv
356.016 288.689 358.256 286.45 361.016 286.45 cv
363.778 286.45 366.016 288.689 366.016 291.45 cv
287.016 291.45 mo
287.016 294.211 284.778 296.45 282.016 296.45 cv
279.256 296.45 277.016 294.211 277.016 291.45 cv
277.016 288.689 279.256 286.45 282.016 286.45 cv
284.778 286.45 287.016 288.689 287.016 291.45 cv
207.933 291.45 mo
207.933 294.211 205.694 296.45 202.933 296.45 cv
200.172 296.45 197.933 294.211 197.933 291.45 cv
197.933 288.689 200.172 286.45 202.933 286.45 cv
205.694 286.45 207.933 288.689 207.933 291.45 cv
128.933 291.45 mo
128.933 294.211 126.694 296.45 123.933 296.45 cv
121.172 296.45 118.933 294.211 118.933 291.45 cv
118.933 288.689 121.172 286.45 123.933 286.45 cv
126.694 286.45 128.933 288.689 128.933 291.45 cv
49.9331 291.45 mo
49.9331 294.211 47.6938 296.45 44.9331 296.45 cv
42.1719 296.45 39.9331 294.211 39.9331 291.45 cv
39.9331 288.689 42.1719 286.45 44.9331 286.45 cv
47.6938 286.45 49.9331 288.689 49.9331 291.45 cv
440.1 278.783 mo
445.1 272.2 li
440.1 265.617 li
435.1 272.2 li
440.1 278.783 li
440.1 278.783 li
cp
361.016 278.783 mo
366.016 272.2 li
361.016 265.617 li
356.016 272.2 li
361.016 278.783 li
361.016 278.783 li
cp
282.016 278.783 mo
287.016 272.2 li
282.016 265.617 li
277.016 272.2 li
282.016 278.783 li
282.016 278.783 li
cp
202.933 278.783 mo
207.933 272.2 li
202.933 265.617 li
197.933 272.2 li
202.933 278.783 li
202.933 278.783 li
cp
123.933 278.783 mo
128.933 272.2 li
123.933 265.617 li
118.933 272.2 li
123.933 278.783 li
123.933 278.783 li
cp
44.9331 278.783 mo
49.9331 272.2 li
44.9331 265.617 li
39.9331 272.2 li
44.9331 278.783 li
44.9331 278.783 li
cp
443.6 244.45 mo
436.6 251.45 li
436.6 244.45 mo
443.6 251.45 li
364.516 244.45 mo
357.516 251.45 li
357.516 244.45 mo
364.516 251.45 li
285.516 244.45 mo
278.516 251.45 li
278.516 244.45 mo
285.516 251.45 li
206.433 244.45 mo
199.433 251.45 li
199.433 244.45 mo
206.433 251.45 li
127.433 244.45 mo
120.433 251.45 li
120.433 244.45 mo
127.433 251.45 li
48.4331 244.45 mo
41.4331 251.45 li
41.4331 244.45 mo
48.4331 251.45 li
436.182 179.033 mo
444.016 179.033 li
444.016 171.2 li
436.182 171.2 li
436.182 179.033 li
cp
357.1 179.033 mo
364.934 179.033 li
364.934 171.2 li
357.1 171.2 li
357.1 179.033 li
cp
278.1 179.033 mo
285.934 179.033 li
285.934 171.2 li
278.1 171.2 li
278.1 179.033 li
cp
199.017 179.033 mo
206.85 179.033 li
206.85 171.2 li
199.017 171.2 li
199.017 179.033 li
cp
120.017 179.033 mo
127.85 179.033 li
127.85 171.2 li
120.017 171.2 li
120.017 179.033 li
cp
41.0171 179.033 mo
48.8501 179.033 li
48.8501 171.2 li
41.0171 171.2 li
41.0171 179.033 li
cp
440.1 133.866 mo
440.1 143.866 li
435.1 138.866 mo
445.1 138.866 li
361.016 133.866 mo
361.016 143.866 li
356.016 138.866 mo
366.016 138.866 li
282.016 133.866 mo
282.016 143.866 li
277.016 138.866 mo
287.016 138.866 li
202.933 133.866 mo
202.933 143.866 li
197.933 138.866 mo
207.933 138.866 li
123.933 133.866 mo
123.933 143.866 li
118.933 138.866 mo
128.933 138.866 li
44.9331 133.866 mo
44.9331 143.866 li
39.9331 138.866 mo
49.9331 138.866 li
@
239.1 321.7 mo
239.1 330.101 li
240.5 330.101 li
240.5 325.511 li
240.5 323.813 241.374 322.7 242.715 322.7 cv
243.745 322.7 244.401 323.336 244.401 324.336 cv
244.401 330.101 li
245.799 330.101 li
245.799 323.782 li
245.799 322.395 244.749 321.5 243.114 321.5 cv
241.852 321.5 241.043 321.973 240.299 323.124 cv
240.299 321.7 li
239.1 321.7 li
cp
f
0 171.9 mo
0 173.3 li
9.57178 173.3 li
0 179.387 li
0 181 li
11.7002 181 li
11.7002 179.601 li
2.24414 179.601 li
11.7002 173.579 li
11.7002 171.9 li
0 171.9 li
cp
f
4.2998 166.2 mo
4.2998 164.696 5.5459 163.8 7.64893 163.8 cv
9.63818 163.8 10.8999 164.729 10.8999 166.2 cv
10.8999 167.688 9.65479 168.601 7.6001 168.601 cv
5.56201 168.601 4.2998 167.688 4.2998 166.2 cv
4.2998 166.2 li
cp
3.1001 166.217 mo
3.1001 168.574 4.7832 170 7.60107 170 cv
10.4189 170 12.1001 168.589 12.1001 166.201 cv
12.1001 163.844 10.4189 162.4 7.66504 162.4 cv
4.76709 162.4 3.1001 163.796 3.1001 166.217 cv
3.1001 166.217 li
cp
f
4.2998 157.561 mo
4.2998 156.115 5.60107 155.2 7.63281 155.2 cv
9.59912 155.2 10.8999 156.132 10.8999 157.544 cv
10.8999 159.021 9.58398 160 7.6001 160 cv
5.61719 160 4.2998 159.021 4.2998 157.561 cv
4.2998 157.561 li
cp
0 153.8 mo
0 155.2 li
4.37207 155.2 li
3.54004 155.763 3.1001 156.663 3.1001 157.787 cv
3.1001 159.971 4.84717 161.4 7.521 161.4 cv
10.355 161.4 12.1001 159.99 12.1001 157.706 cv
12.1001 156.539 11.6592 155.729 10.5962 155 cv
11.7002 155 li
11.7002 153.8 li
0 153.8 li
cp
f
6.8999 150.836 mo
5.32422 150.725 4.2998 149.78 4.2998 148.436 cv
4.2998 147.124 5.40479 146.116 6.80176 146.116 cv
6.83496 146.116 6.86719 146.116 6.8999 146.132 cv
6.8999 150.836 li
cp
8 144.692 mo
6.71484 144.692 5.94385 144.79 5.31787 145.031 cv
3.93701 145.578 3.1001 146.865 3.1001 148.44 cv
3.1001 150.788 4.89502 152.3 7.64893 152.3 cv
10.4028 152.3 12.1001 150.836 12.1001 148.471 cv
12.1001 146.541 11 145.206 9.15625 144.867 cv
9.15625 146.219 li
10.3018 146.589 10.8999 147.344 10.8999 148.422 cv
10.8999 149.274 10.5132 149.998 9.80518 150.448 cv
9.32178 150.771 8.83789 150.882 8 150.898 cv
8 144.692 li
cp
f
5.65186 136.992 mo
4.02002 137.008 3.1001 138.105 3.1001 140.057 cv
3.1001 142.025 4.11279 143.3 5.67285 143.3 cv
6.99219 143.3 7.61914 142.628 8.10205 140.644 cv
8.40723 139.396 li
8.63184 138.468 8.96973 138.1 9.58105 138.1 cv
10.3691 138.1 10.8999 138.877 10.8999 140.034 cv
10.8999 140.747 10.6841 141.349 10.3179 141.682 cv
10.0688 141.888 9.81982 141.983 9.2041 142.062 cv
9.2041 143.456 li
11.1621 143.393 12.1001 142.312 12.1001 140.134 cv
12.1001 138.036 11.0552 136.7 9.43018 136.7 cv
8.17578 136.7 7.48389 137.404 7.08203 139.068 cv
6.77686 140.348 li
6.52002 141.436 6.16602 141.9 5.5708 141.9 cv
4.79883 141.9 4.2998 141.206 4.2998 140.108 cv
4.2998 139.026 4.76709 138.445 5.65186 138.413 cv
5.65186 136.992 li
cp
f
233.682 125.95 mo
334.1 125.95 li
334.1 27.0332 li
233.682 27.0332 li
233.682 125.95 li
cp
0 0 0 0 cmyk
ef
1.5 lw
233.682 125.95 mo
233.682 27.0332 li
334.1 27.0332 li
334.1 125.95 li
233.682 125.95 li
@
334.1 125.95 mo
334.1 27.0332 li
233.682 125.95 mo
233.682 27.0332 li
233.682 27.0332 mo
334.1 27.0332 li
233.682 125.95 mo
334.1 125.95 li
233.682 125.95 mo
233.682 27.0332 li
233.682 125.95 mo
334.1 125.95 li
334.1 125.95 mo
334.1 27.0332 li
233.682 125.95 mo
233.682 27.0332 li
233.682 27.0332 mo
334.1 27.0332 li
233.682 125.95 mo
334.1 125.95 li
0 0 0 1 cmyk
@
278.237 38.6001 mo
279.014 38.6001 li
280.588 38.6001 281.401 39.3154 281.401 40.6953 cv
281.401 42.1401 280.512 43 279.032 43 cv
277.485 43 276.727 42.207 276.629 40.5039 cv
275.211 40.5039 li
275.276 41.4253 275.436 42.022 275.708 42.5381 cv
276.284 43.6353 277.405 44.2002 278.958 44.2002 cv
281.295 44.2002 282.799 42.8101 282.799 40.668 cv
282.799 39.23 282.239 38.4312 280.875 37.9673 cv
281.891 37.5513 282.401 36.7529 282.401 35.6182 cv
282.401 33.668 281.124 32.5 278.997 32.5 cv
276.745 32.5 275.547 33.7344 275.5 36.1201 cv
276.901 36.1201 li
276.917 35.436 276.979 35.0542 277.153 34.7041 cv
277.467 34.083 278.161 33.7002 279.028 33.7002 cv
280.258 33.7002 281 34.4341 281 35.6299 cv
281 36.4272 280.713 36.9063 280.094 37.1611 cv
279.713 37.3203 279.221 37.3843 278.237 37.4004 cv
278.237 38.6001 li
cp
f
285 43.8003 mo
286.7 43.8003 li
286.7 42.1001 li
285 42.1001 li
285 43.8003 li
cp
f
292.401 38.5 mo
293.827 38.5 294.799 39.4033 294.799 40.7422 cv
294.799 42.0972 293.827 43 292.368 43 cv
290.973 43 290 42.0811 290 40.7422 cv
290 39.4033 290.973 38.5 292.401 38.5 cv
292.401 38.5 li
cp
292.401 33.7002 mo
293.62 33.7002 294.401 34.4111 294.401 35.5254 cv
294.401 36.5903 293.602 37.3003 292.401 37.3003 cv
291.198 37.3003 290.401 36.5903 290.401 35.5093 cv
290.401 34.4111 291.196 33.7002 292.401 33.7002 cv
292.401 33.7002 li
cp
294.256 37.8721 mo
295.418 37.1689 295.799 36.5933 295.799 35.5234 cv
295.799 33.749 294.411 32.5 292.401 32.5 cv
290.405 32.5 289 33.749 289 35.5234 cv
289 36.5781 289.381 37.1533 290.528 37.8721 cv
289.237 38.4951 288.6 39.4385 288.6 40.6841 cv
288.6 42.7612 290.165 44.2002 292.401 44.2002 cv
294.635 44.2002 296.2 42.7622 296.2 40.7002 cv
296.2 39.437 295.563 38.4951 294.256 37.8711 cv
294.256 37.8721 li
cp
f
298.963 39 mo
299.077 37.4243 300.02 36.4004 301.364 36.4004 cv
302.676 36.4004 303.684 37.5054 303.684 38.9023 cv
303.684 38.9351 303.684 38.9673 303.668 39 cv
298.963 39 li
cp
305.108 40.1001 mo
305.108 38.8154 305.01 38.0439 304.768 37.418 cv
304.221 36.0371 302.934 35.2002 301.36 35.2002 cv
299.012 35.2002 297.5 36.9951 297.5 39.749 cv
297.5 42.5029 298.963 44.2002 301.329 44.2002 cv
303.258 44.2002 304.594 43.1001 304.932 41.2563 cv
303.581 41.2563 li
303.211 42.4023 302.456 43 301.377 43 cv
300.526 43 299.801 42.6133 299.352 41.9053 cv
299.03 41.4224 298.918 40.938 298.903 40.1001 cv
305.108 40.1001 li
cp
f
314.344 39.5 mo
311 39.5 li
311 36.2163 li
309.901 36.2163 li
309.901 39.5 li
306.6 39.5 li
306.6 40.6001 li
309.901 40.6001 li
309.901 44 li
311 44 li
311 40.6001 li
314.344 40.6001 li
314.344 39.5 li
cp
f
319.6 33.7002 mo
321.139 33.7002 321.901 35.2383 321.901 38.2793 cv
321.901 41.4961 321.155 43 319.567 43 cv
318.061 43 317.299 41.4321 317.299 38.3271 cv
317.299 35.2222 318.061 33.7002 319.6 33.7002 cv
319.6 33.7002 li
cp
319.598 32.5 mo
318.547 32.5 317.59 32.9463 317 33.7002 cv
316.266 34.6963 315.901 36.2212 315.901 38.3242 cv
315.901 42.1611 317.176 44.2002 319.598 44.2002 cv
321.991 44.2002 323.299 42.1611 323.299 38.4199 cv
323.299 36.2041 322.948 34.7271 322.198 33.7002 cv
321.608 32.9312 320.667 32.5 319.598 32.5 cv
319.598 32.5 li
cp
f
331.708 32.5 mo
325.86 32.5 li
325.012 38.6323 li
326.315 38.6323 li
326.975 37.8662 327.522 37.6001 328.407 37.6001 cv
329.934 37.6001 330.901 38.6523 330.901 40.3491 cv
330.901 41.998 329.952 43 328.407 43 cv
327.168 43 326.413 42.3501 326.075 41.0161 cv
324.661 41.0161 li
324.85 41.9541 325.012 42.4063 325.346 42.8271 cv
325.987 43.7002 327.137 44.2002 328.415 44.2002 cv
330.7 44.2002 332.299 42.5449 332.299 40.1572 cv
332.299 37.9282 330.813 36.4004 328.639 36.4004 cv
327.84 36.4004 327.202 36.5859 326.545 37.0161 cv
326.995 33.9004 li
331.708 33.9004 li
331.708 32.5 li
cp
f
.5 lw
260.682 38.0332 mo
260.682 40.7939 258.444 43.0332 255.682 43.0332 cv
252.922 43.0332 250.682 40.7939 250.682 38.0332 cv
250.682 35.2725 252.922 33.0332 255.682 33.0332 cv
258.444 33.0332 260.682 35.2725 260.682 38.0332 cv
@
278.799 54.8521 mo
278.799 62.9004 li
280.2 62.9004 li
280.2 51.6001 li
279.284 51.6001 li
278.795 53.3369 278.479 53.5771 276.333 53.8481 cv
276.333 54.8521 li
278.799 54.8521 li
cp
f
285 62.9004 mo
286.7 62.9004 li
286.7 61.2002 li
285 61.2002 li
285 62.9004 li
cp
f
292.28 52.8003 mo
293.606 52.8003 294.608 53.9014 294.608 55.3892 cv
294.608 56.7974 293.622 57.8003 292.231 57.8003 cv
290.858 57.8003 290 56.8452 290 55.3081 cv
290 53.8521 290.969 52.8003 292.28 52.8003 cv
292.28 52.8003 li
cp
288.848 60.3081 mo
289.118 62.1851 290.327 63.3003 292.043 63.3003 cv
293.286 63.3003 294.415 62.6934 295.065 61.686 cv
295.782 60.583 296.098 59.1934 296.098 57.1323 cv
296.098 55.2305 295.811 54.0161 295.143 53.0093 cv
294.522 52.0981 293.536 51.6001 292.293 51.6001 cv
290.143 51.6001 288.598 53.1963 288.598 55.4121 cv
288.598 57.5171 290.043 58.999 292.098 58.999 cv
293.172 58.999 293.959 58.6353 294.7 57.7993 cv
294.682 60.5654 293.786 62.0991 292.165 62.0991 cv
291.17 62.0991 290.483 61.4463 290.256 60.3071 cv
288.848 60.3081 li
cp
f
298.963 58.1001 mo
299.077 56.5244 300.02 55.5 301.364 55.5 cv
302.676 55.5 303.684 56.605 303.684 58.002 cv
303.684 58.0352 303.684 58.0674 303.668 58.1001 cv
298.963 58.1001 li
cp
305.108 59.2002 mo
305.108 57.915 305.01 57.144 304.768 56.5181 cv
304.221 55.1372 302.934 54.3003 301.36 54.3003 cv
299.012 54.3003 297.5 56.0952 297.5 58.8491 cv
297.5 61.603 298.963 63.3003 301.329 63.3003 cv
303.258 63.3003 304.594 62.2002 304.932 60.3564 cv
303.581 60.3564 li
303.211 61.502 302.456 62.1001 301.377 62.1001 cv
300.526 62.1001 299.801 61.7134 299.352 61.0054 cv
299.03 60.5225 298.918 60.0381 298.903 59.2002 cv
305.108 59.2002 li
cp
f
314.344 58.6001 mo
311 58.6001 li
311 55.3164 li
309.901 55.3164 li
309.901 58.6001 li
306.6 58.6001 li
306.6 59.7002 li
309.901 59.7002 li
309.901 63.1001 li
311 63.1001 li
311 59.7002 li
314.344 59.7002 li
314.344 58.6001 li
cp
f
319.6 52.8003 mo
321.139 52.8003 321.901 54.3384 321.901 57.3789 cv
321.901 60.5962 321.155 62.1001 319.567 62.1001 cv
318.061 62.1001 317.299 60.5322 317.299 57.4272 cv
317.299 54.3223 318.061 52.8003 319.6 52.8003 cv
319.6 52.8003 li
cp
319.598 51.6001 mo
318.547 51.6001 317.59 52.0459 317 52.8003 cv
316.266 53.7964 315.901 55.3213 315.901 57.4243 cv
315.901 61.2612 317.176 63.3003 319.598 63.3003 cv
321.991 63.3003 323.299 61.2612 323.299 57.52 cv
323.299 55.3042 322.948 53.8271 322.198 52.8003 cv
321.608 52.0313 320.667 51.6001 319.598 51.6001 cv
319.598 51.6001 li
cp
f
328.676 57.1001 mo
330.045 57.1001 330.901 58.0591 330.901 59.6001 cv
330.901 61.0449 329.932 62.1001 328.627 62.1001 cv
327.307 62.1001 326.307 60.9961 326.307 59.52 cv
326.307 58.0913 327.276 57.1001 328.676 57.1001 cv
328.676 57.1001 li
cp
332.069 54.5 mo
331.795 52.6821 330.583 51.6001 328.858 51.6001 cv
327.612 51.6001 326.493 52.21 325.823 53.2163 cv
325.12 54.3193 324.799 55.709 324.799 57.77 cv
324.799 59.6719 325.086 60.8862 325.756 61.8931 cv
326.364 62.8042 327.354 63.2993 328.596 63.2993 cv
330.75 63.2993 332.299 61.7041 332.299 59.4883 cv
332.299 57.3833 330.854 55.8994 328.815 55.8994 cv
327.692 55.8994 326.807 56.3091 326.2 57.0991 cv
326.215 54.334 327.116 52.7993 328.739 52.7993 cv
329.735 52.7993 330.426 53.4189 330.653 54.499 cv
332.069 54.5 li
cp
f
255.682 63.8662 mo
260.682 57.2832 li
255.682 50.7002 li
250.682 57.2832 li
255.682 63.8662 li
255.682 63.8662 li
cp
@
278.237 77 mo
279.014 77 li
280.588 77 281.401 77.7153 281.401 79.0952 cv
281.401 80.54 280.512 81.4004 279.032 81.4004 cv
277.485 81.4004 276.727 80.6069 276.629 78.9043 cv
275.211 78.9043 li
275.276 79.8252 275.436 80.4224 275.708 80.938 cv
276.284 82.0352 277.405 82.6001 278.958 82.6001 cv
281.295 82.6001 282.799 81.21 282.799 79.0684 cv
282.799 77.6304 282.239 76.8311 280.875 76.3672 cv
281.891 75.9512 282.401 75.1533 282.401 74.0181 cv
282.401 72.0684 281.124 70.9004 278.997 70.9004 cv
276.745 70.9004 275.547 72.1343 275.5 74.52 cv
276.901 74.52 li
276.917 73.8359 276.979 73.4541 277.153 73.104 cv
277.467 72.4834 278.161 72.1001 279.028 72.1001 cv
280.258 72.1001 281 72.834 281 74.0303 cv
281 74.8271 280.713 75.3062 280.094 75.561 cv
279.713 75.7202 279.221 75.7842 278.237 75.8003 cv
278.237 77 li
cp
f
285 82.2002 mo
286.7 82.2002 li
286.7 80.5 li
285 80.5 li
285 82.2002 li
cp
f
292.28 72.1001 mo
293.606 72.1001 294.608 73.2012 294.608 74.6895 cv
294.608 76.0972 293.622 77.1001 292.231 77.1001 cv
290.858 77.1001 290 76.145 290 74.6084 cv
290 73.1523 290.969 72.1001 292.28 72.1001 cv
292.28 72.1001 li
cp
288.848 79.6084 mo
289.118 81.4854 290.327 82.6001 292.043 82.6001 cv
293.286 82.6001 294.415 81.9932 295.065 80.9863 cv
295.782 79.8833 296.098 78.4932 296.098 76.4321 cv
296.098 74.5303 295.811 73.3164 295.143 72.3091 cv
294.522 71.3984 293.536 70.9004 292.293 70.9004 cv
290.143 70.9004 288.598 72.4961 288.598 74.7119 cv
288.598 76.8174 290.043 78.2993 292.098 78.2993 cv
293.172 78.2993 293.959 77.9351 294.7 77.0991 cv
294.682 79.8652 293.786 81.3994 292.165 81.3994 cv
291.17 81.3994 290.483 80.7461 290.256 79.6074 cv
288.848 79.6084 li
cp
f
298.963 77.4004 mo
299.077 75.8242 300.02 74.8003 301.364 74.8003 cv
302.676 74.8003 303.684 75.9053 303.684 77.3022 cv
303.684 77.335 303.684 77.3672 303.668 77.4004 cv
298.963 77.4004 li
cp
305.108 78.5 mo
305.108 77.2153 305.01 76.4443 304.768 75.8184 cv
304.221 74.437 302.934 73.6001 301.36 73.6001 cv
299.012 73.6001 297.5 75.395 297.5 78.1494 cv
297.5 80.9033 298.963 82.6001 301.329 82.6001 cv
303.258 82.6001 304.594 81.5 304.932 79.6563 cv
303.581 79.6563 li
303.211 80.8022 302.456 81.4004 301.377 81.4004 cv
300.526 81.4004 299.801 81.0132 299.352 80.3052 cv
299.03 79.8223 298.918 79.3384 298.903 78.5 cv
305.108 78.5 li
cp
f
314.344 77.9004 mo
311 77.9004 li
311 74.6162 li
309.901 74.6162 li
309.901 77.9004 li
306.6 77.9004 li
306.6 79 li
309.901 79 li
309.901 82.4004 li
311 82.4004 li
311 79 li
314.344 79 li
314.344 77.9004 li
cp
f
319.6 72.1001 mo
321.139 72.1001 321.901 73.6382 321.901 76.6792 cv
321.901 79.896 321.155 81.4004 319.567 81.4004 cv
318.061 81.4004 317.299 79.832 317.299 76.7271 cv
317.299 73.6221 318.061 72.1001 319.6 72.1001 cv
319.6 72.1001 li
cp
319.598 70.9004 mo
318.547 70.9004 317.59 71.3462 317 72.1001 cv
316.266 73.0962 315.901 74.6211 315.901 76.7241 cv
315.901 80.561 317.176 82.6001 319.598 82.6001 cv
321.991 82.6001 323.299 80.561 323.299 76.8203 cv
323.299 74.604 322.948 73.127 322.198 72.1001 cv
321.608 71.3311 320.667 70.9004 319.598 70.9004 cv
319.598 70.9004 li
cp
f
328.676 76.4004 mo
330.045 76.4004 330.901 77.3594 330.901 78.9004 cv
330.901 80.3452 329.932 81.4004 328.627 81.4004 cv
327.307 81.4004 326.307 80.2959 326.307 78.8203 cv
326.307 77.3911 327.276 76.4004 328.676 76.4004 cv
328.676 76.4004 li
cp
332.069 73.8003 mo
331.795 71.9824 330.583 70.9004 328.858 70.9004 cv
327.612 70.9004 326.493 71.5103 325.823 72.5161 cv
325.12 73.6191 324.799 75.0093 324.799 77.0703 cv
324.799 78.9722 325.086 80.186 325.756 81.1934 cv
326.364 82.104 327.354 82.5991 328.596 82.5991 cv
330.75 82.5991 332.299 81.0044 332.299 78.7881 cv
332.299 76.6831 330.854 75.1992 328.815 75.1992 cv
327.692 75.1992 326.807 75.6094 326.2 76.3994 cv
326.215 73.6343 327.116 72.0991 328.739 72.0991 cv
329.735 72.0991 330.426 72.7192 330.653 73.7993 cv
332.069 73.8003 li
cp
f
259.182 72.9502 mo
252.182 79.9502 li
252.182 72.9502 mo
259.182 79.9502 li
@
278.981 91.3003 mo
280.305 91.3003 281.307 92.4014 281.307 93.8892 cv
281.307 95.2974 280.323 96.3003 278.93 96.3003 cv
277.557 96.3003 276.7 95.3452 276.7 93.8081 cv
276.7 92.3521 277.67 91.3003 278.981 91.3003 cv
278.981 91.3003 li
cp
275.547 98.8081 mo
275.819 100.685 277.028 101.8 278.745 101.8 cv
279.985 101.8 281.114 101.193 281.764 100.186 cv
282.481 99.083 282.799 97.6934 282.799 95.6323 cv
282.799 93.73 282.512 92.5161 281.842 91.5093 cv
281.221 90.5981 280.235 90.1001 278.993 90.1001 cv
276.844 90.1001 275.299 91.6963 275.299 93.9121 cv
275.299 96.0171 276.745 97.499 278.797 97.499 cv
279.874 97.499 280.661 97.1353 281.399 96.2993 cv
281.381 99.0654 280.485 100.599 278.866 100.599 cv
277.872 100.599 277.182 99.9463 276.958 98.8071 cv
275.547 98.8081 li
cp
f
285 101.4 mo
286.7 101.4 li
286.7 99.7002 li
285 99.7002 li
285 101.4 li
cp
f
292.28 91.3003 mo
293.606 91.3003 294.608 92.4014 294.608 93.8892 cv
294.608 95.2974 293.622 96.3003 292.231 96.3003 cv
290.858 96.3003 290 95.3452 290 93.8081 cv
290 92.3521 290.969 91.3003 292.28 91.3003 cv
292.28 91.3003 li
cp
288.848 98.8081 mo
289.118 100.685 290.327 101.8 292.043 101.8 cv
293.286 101.8 294.415 101.193 295.065 100.186 cv
295.782 99.083 296.098 97.6934 296.098 95.6323 cv
296.098 93.73 295.811 92.5161 295.143 91.5093 cv
294.522 90.5981 293.536 90.1001 292.293 90.1001 cv
290.143 90.1001 288.598 91.6963 288.598 93.9121 cv
288.598 96.0171 290.043 97.499 292.098 97.499 cv
293.172 97.499 293.959 97.1353 294.7 96.2993 cv
294.682 99.0654 293.786 100.599 292.165 100.599 cv
291.17 100.599 290.483 99.9463 290.256 98.8071 cv
288.848 98.8081 li
cp
f
298.963 96.6001 mo
299.077 95.0244 300.02 94 301.364 94 cv
302.676 94 303.684 95.105 303.684 96.502 cv
303.684 96.5352 303.684 96.5674 303.668 96.6001 cv
298.963 96.6001 li
cp
305.108 97.7002 mo
305.108 96.415 305.01 95.644 304.768 95.0181 cv
304.221 93.6372 302.934 92.8003 301.36 92.8003 cv
299.012 92.8003 297.5 94.5952 297.5 97.3491 cv
297.5 100.103 298.963 101.8 301.329 101.8 cv
303.258 101.8 304.594 100.7 304.932 98.856 cv
303.581 98.856 li
303.211 100.002 302.456 100.6 301.377 100.6 cv
300.526 100.6 299.801 100.213 299.352 99.5054 cv
299.03 99.022 298.918 98.5381 298.903 97.7002 cv
305.108 97.7002 li
cp
f
314.344 97.1001 mo
311 97.1001 li
311 93.8164 li
309.901 93.8164 li
309.901 97.1001 li
306.6 97.1001 li
306.6 98.2002 li
309.901 98.2002 li
309.901 101.6 li
311 101.6 li
311 98.2002 li
314.344 98.2002 li
314.344 97.1001 li
cp
f
319.6 91.3003 mo
321.139 91.3003 321.901 92.8384 321.901 95.8794 cv
321.901 99.0962 321.155 100.6 319.567 100.6 cv
318.061 100.6 317.299 99.0322 317.299 95.9272 cv
317.299 92.8223 318.061 91.3003 319.6 91.3003 cv
319.6 91.3003 li
cp
319.598 90.1001 mo
318.547 90.1001 317.59 90.5464 317 91.3003 cv
316.266 92.2964 315.901 93.8213 315.901 95.9243 cv
315.901 99.7612 317.176 101.8 319.598 101.8 cv
321.991 101.8 323.299 99.7612 323.299 96.02 cv
323.299 93.8042 322.948 92.3271 322.198 91.3003 cv
321.608 90.5313 320.667 90.1001 319.598 90.1001 cv
319.598 90.1001 li
cp
f
328.676 95.6001 mo
330.045 95.6001 330.901 96.5591 330.901 98.1001 cv
330.901 99.5449 329.932 100.6 328.627 100.6 cv
327.307 100.6 326.307 99.4961 326.307 98.02 cv
326.307 96.5913 327.276 95.6001 328.676 95.6001 cv
328.676 95.6001 li
cp
332.069 93 mo
331.795 91.1821 330.583 90.1001 328.858 90.1001 cv
327.612 90.1001 326.493 90.71 325.823 91.7163 cv
325.12 92.8193 324.799 94.209 324.799 96.27 cv
324.799 98.1724 325.086 99.3862 325.756 100.393 cv
326.364 101.304 327.354 101.799 328.596 101.799 cv
330.75 101.799 332.299 100.204 332.299 97.9883 cv
332.299 95.8833 330.854 94.3994 328.815 94.3994 cv
327.692 94.3994 326.807 94.8091 326.2 95.5991 cv
326.215 92.834 327.116 91.2993 328.739 91.2993 cv
329.735 91.2993 330.426 91.9189 330.653 92.999 cv
332.069 93 li
cp
f
251.766 99.5332 mo
259.6 99.5332 li
259.6 91.7002 li
251.766 91.7002 li
251.766 99.5332 li
cp
@
278.799 112.552 mo
278.799 120.6 li
280.2 120.6 li
280.2 109.3 li
279.284 109.3 li
278.795 111.037 278.479 111.277 276.333 111.548 cv
276.333 112.552 li
278.799 112.552 li
cp
f
285 120.6 mo
286.7 120.6 li
286.7 118.9 li
285 118.9 li
285 120.6 li
cp
f
291.536 115.4 mo
292.315 115.4 li
293.887 115.4 294.7 116.115 294.7 117.495 cv
294.7 118.94 293.813 119.8 292.331 119.8 cv
290.784 119.8 290.028 119.007 289.93 117.304 cv
288.512 117.304 li
288.577 118.225 288.737 118.822 289.008 119.338 cv
289.584 120.435 290.706 121 292.258 121 cv
294.594 121 296.1 119.61 296.1 117.468 cv
296.1 116.03 295.54 115.231 294.176 114.767 cv
295.192 114.351 295.7 113.553 295.7 112.418 cv
295.7 110.468 294.422 109.3 292.295 109.3 cv
290.043 109.3 288.846 110.534 288.799 112.92 cv
290.2 112.92 li
290.215 112.236 290.28 111.854 290.452 111.504 cv
290.766 110.883 291.461 110.5 292.329 110.5 cv
293.557 110.5 294.299 111.234 294.299 112.43 cv
294.299 113.227 294.014 113.706 293.393 113.961 cv
293.012 114.12 292.52 114.184 291.536 114.2 cv
291.536 115.4 li
cp
f
298.963 115.8 mo
299.077 114.224 300.02 113.2 301.364 113.2 cv
302.676 113.2 303.684 114.305 303.684 115.702 cv
303.684 115.735 303.684 115.767 303.668 115.8 cv
298.963 115.8 li
cp
305.108 116.9 mo
305.108 115.615 305.01 114.844 304.768 114.218 cv
304.221 112.837 302.934 112 301.36 112 cv
299.012 112 297.5 113.795 297.5 116.549 cv
297.5 119.303 298.963 121 301.329 121 cv
303.258 121 304.594 119.9 304.932 118.056 cv
303.581 118.056 li
303.211 119.202 302.456 119.8 301.377 119.8 cv
300.526 119.8 299.801 119.413 299.352 118.705 cv
299.03 118.222 298.918 117.738 298.903 116.9 cv
305.108 116.9 li
cp
f
314.344 116.3 mo
311 116.3 li
311 113.016 li
309.901 113.016 li
309.901 116.3 li
306.6 116.3 li
306.6 117.4 li
309.901 117.4 li
309.901 120.8 li
311 120.8 li
311 117.4 li
314.344 117.4 li
314.344 116.3 li
cp
f
319.6 110.5 mo
321.139 110.5 321.901 112.038 321.901 115.079 cv
321.901 118.296 321.155 119.8 319.567 119.8 cv
318.061 119.8 317.299 118.232 317.299 115.127 cv
317.299 112.022 318.061 110.5 319.6 110.5 cv
319.6 110.5 li
cp
319.598 109.3 mo
318.547 109.3 317.59 109.746 317 110.5 cv
316.266 111.496 315.901 113.021 315.901 115.124 cv
315.901 118.961 317.176 121 319.598 121 cv
321.991 121 323.299 118.961 323.299 115.22 cv
323.299 113.004 322.948 111.527 322.198 110.5 cv
321.608 109.731 320.667 109.3 319.598 109.3 cv
319.598 109.3 li
cp
f
332.42 109.3 mo
324.836 109.3 li
324.836 110.7 li
330.963 110.7 li
328.26 114.537 327.157 116.892 326.307 120.6 cv
327.813 120.6 li
328.436 116.982 329.86 113.874 332.42 110.48 cv
332.42 109.3 li
cp
f
255.682 109.866 mo
255.682 119.866 li
250.682 114.866 mo
260.682 114.866 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 14.0
%%AI8_CreatorVersion: 14.0.0
%%For: (fwood) ()
%%Title: (node_counts_cleaned.eps)
%%CreationDate: 4/25/2009 5:29 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!Q;flA%TNo9<gLP[u&MYVq!p4X,^q]]8ADQU>u>I%e_PXO93-rD=jF78@KRJsShPl?>]m"^V3"!H3!=^5jjRH`2P<2$UJ9I(5W
%+;:0,PO$J[Vn;i(n*A65/X?IIAD'Go[EXm#R3TI@:@?uRX1)SM.WuY`=Kpe>Ta.ER8mp@*Ht$'&_m&XBc0"E:A,WBJdV@Xig[0u4
%UY0B8QI["_gBVu<[c^t8h`'iTc.6C,;_j>i5u?%A?@TM(g`='jhUGbf-/8"tDI4'3ZZb__IBc1iF84V@D<'`\IKG>kGC,D?^.iPD
%CO.tBG</QA+AL,635!nqWrui0hot2oqY0l1VcE'<2kN:[$F6ero4+oq!!j#.cSM\d+'SU(qtf>oUXlCX?YmV1ft\*s.uHS:l*VCn
%i*/-^8q(1;Q\nB-hs]l\>qGBoCNoFekKd>4F*dj>cs5%>%"nN%?bLf#e6?Q]pDp1JX%^SOFP+7,2[#(9Cc?+dH0#'^qNmOn?Yb(n
%GG("dN>HCjoWP%lST%F&UYb"S6R'Rsor%Q/%oh3cbI9!>a`m5]@%lh>--pd-Q:Fo%)aKE/Cl3^&El<WU"9n/TaV3mCj4=2'qklk[
%7K7\3Fap=#dC2^KqhLV;$+0_did\VLd.U54rZnKS_R4B^0H!@An._j>4l's3+0d%eF=,U*%\>pV)U7aKXa6XaJE#[Y2hM+^7nrd:
%rWs0tr-$$8"kP,](O3L>C;)h!4ah++r&1m)f=\)L:26=A0G<YHGO=&rLU"l4qZNPspV.)DV0;l$gBH^'+-/A*`dR_],1Ie,min]*
%OCt\nj!RmPek>m1l$]nkOI1:or^t`YA;u$/V]d5lV\+HGIpV1T[793UH`Ql<j8LqGJ'*+0.-'&+A7<-Xl3\1f_XBG]/L6%Ze8&bU
%NkUZ%P$e-Tk\Shb_>L,%+[NT/I]k]!cPiQ(V"Sn3qH.Mr(IA&7<P&E_;*)Ge=hj>(((O/jS\Em'$Lo,`^Sb896n`(.8V<P_5V'g\
%$Gl;\U7?\EItG507$UT#f6hs8A"[r?U\9XS/@hmJ<-[57d%%[Z>Zg3i1ILjGB>2Y5%@kP@qbPJO51*;C&ScIqI8YE+F?\$:W^jJ;
%H>+GCSDM.G>aL/'dP:a=rd2FFhhc!P[#]^*r8m_rq"+diq?aC@QCQB3l12/X\f63En.ADtkBB1BnaY/NDl"p_!<8_G64:34G&R"E
%XT?mHS^ll`L(Qt_5-SpACi8#V3OskDXXdQf@rIl#!2L3E-6'm\o\#A(_-XF8#>tFg^]@RXRRMd/>*qmN[8%1hf2VjecGmp%>@^O3
%o`k_l+!)DQ+dDNn<GCT6O,YM8YQ.:hFas#2WP_+d:PID(XkJ7SRNYPUb2*$s"1hK^ih`_SFUqS#?fOAA5B-,?l^=`Mp@[m^<r3Vj
%W)K>h.Oe9hpKHTG(<.0XN.OhZ*-jPNRs+Gos*7X.24s/&\C>3K51K$.Yt5Y#s&1cDk+;K5ZUc<,B#"sAU=L#lW*Xk=68:Gub^?9%
%A&Wl`VGT!'15b_rs)gWk>q%?(?<f'ifft8-@lnU9g7@BdT0WAR6Uc+%>sfhCk>3"N`?k1AA)'>'rbV9's(a$l^]!h$+Q*20B_$?,
%rq?@62=<GA`A)55<..iO20,/afDE2*O$`fj9E$BI[r!'!dkJ?lmmm?Uqi=&n7Mbr$1f/qZ]/B)=6>cV[:XUf!K$^W"Ik.CQrZnTI
%jg3f[k-aBLf`=J#T`2(2@bc[+Qi-&C@oJJp4Dhg>DX4Yro]InX@'9B*eDmgjWSN-522',*"'9+4Ne^:8adcD#I=?HD^Unu@/?*b9
%N5(oHh;?)Y!oM_'BpN:CL)*?QHj-D(.\3s3m<Y\+3Ilr0C5<I$CYZDZUT4:J'\/?-*c(-J%WaXgDOZV$#PhiEhEBat`0;Efl#Z7[
%::5=`YI+#OBpRW+g7<QUra4qF0j*0<9=7g`VHI]jQ#:T</RB5EnQ^EqQF?6(?Q'W_'1b5IYU(L0ToIdTn$VkgU8=Ob7Z&fHh#ki9
%SU0N)(P=,"b`KDjBF9ndXLE]#g(SJ.ZgnDb4>h%!RP15[G8<E?ZC^C9DJ%p%-5<UUq<V;[7Z!jT3ED5IeqtU<>.>kg-XDXFFg/5n
%SQ>-WrEOukG5DNk^;#="P?lVE@>_d97/Gs=V=P*HmF!4kUdo*S[!o3FhUheY.;dnsGA9)2NVea'[nT@n,rsB`C/<_oC>\?RPNK4<
%7>$)?X4V3iH>O)qh!]:]C"("Z#aZJVZXV;]Pmm2<+'RZ"c]iq)ZL@R`dOSct8X`1=-kb".^_`FPH<AqVIVCW,@m8CHD.!me:#V12
%qBjb7D<(U5H3%=*^HjN#LQ<&t,PK6c?uPZ2HKuFnc0^aHTmm)qU2g340=<mDk!Qgqkmm?WW/>#^0%8"P81k[,YMXLgNc&Tkg=*0%
%^`Z.Vc.62!/k&X'W^k</oY'*hWs#HhR+LCUZeggRn$NM'lEVUZX>3FQ-`:7Sn1nu?h3oVA<`R.6ok3ln!ojcU@:J5SQ[=IL!!E+F
%>`U8T@AR^u7[ITOL\p6RkbEpdr9C]Td*QqV)q$3,=f<%NR@3-S)ZNcaU,VS,e02=uoqm"e.sWH%EiQ.U:>*E+[)%OE]>tQ+R.)=V
%4eg#ehBNAiQTm`$_8UD!-m^I3</GM`Z^k.amN,@KI`?!2ph.;[QT:phWuot*>E92t,W!l(9L!"_r7n<VOCF4Q@%fZjp*QXT(i[.D
%nUe?u%D"O"=N#?QfrT[Up=tpNr[;Wl5j>cKjU)T57\Gl5j>L>4lr&tWUiD5`dG.r2m\BGJU271dO77F4j]ZknB'Xdi^BM9sn%'91
%0@mk>2<kfYf7Ld#<M)lH2fAZ:OW.?bp8OV+>:@u%_a3"6WFG`&nY+CNL#-^$_!mRh:1g2(R-et[rU$R_\SFT[-aceJj[Q]':*\>m
%1dK1F.;UDQF,r[HYKlOX;uM&;Z\C5-h):ld[-EuZW*uDH;X5Sc?`[Z4#O_&]CR.S-0shUclKrb"\*:m2p0>.bla4#cBIMul*_J8]
%Dk#QT[.?7B-15)cEY`0BG8]*gf)\rZSo0H8$S#J0HBK=Z\tMC.\uP&M7pW1>S5i<7V2t9gQoVto\LUt1S:3Ra\XG,KDWOq,n3"1K
%hsMG'0-jR(k3r/[k'Ce^?Lk=Q@8s/88t1F]Ra^[]`6:RqLbr)Bn.`Xt+)%3FjJ1m"jBprHGeK^;MPFh_V`lhfXSMB-pB-'Apa/_0
%bc-gAm7<LsgNIXr[^>;E&(66J/BgG,h.PI([r:Y[Ve`gbnT(W&k$>ZKs8>M"9;K\%ZqPC_5VEp$Q./5`[pZ=dF5M8Ej_5qjb6kXT
%JetCB4t((uDE8UUb,[-1Q%%U"mR$@tJMp_GERq_O!(q\B%JupRqNk;0.UMJPftNMVbHO+%QAsU>!>C/'bVL_^DQZ4_U1V4r`Fa00
%<*I<Xq$9$bF5Kj#:pJg*EI_V/UnbI@1FCSOO1sC4GVe0u[C!&V?-O+ChqZ^bm5u^GlN]nHXuHcQ<k>%kiE"H1mT)HE5J552PdV.(
%H%FDDjol+X2(qcg;Y*lB/^i"4G($]B]8hqtA"+@&c`M-1Vd(6-k1h2]Q?F&V!DBQOM-48qO^\-o'"WsJfX.C1$`Q"jg6bq,,\&=g
%"^-MYRfsO,"KBs"Za@5HheqTg-[US:e8?B.aAo.<A@(kp)B@.d`L83Y#;)Z)"H#_b#U*k9Wmf\jog:D^m[kHk[906De3it+9beEp
%h*4bM&J_`RJ6aBD<4fen80U`o'7eKJ),rLQRc,U'<$5Z@.OC[[m;%`!]#C7M]5`trioS7"<ICKm0M\os]!8^\\=7W20*lWEg&:3&
%=$GD=NGA9n>[I6RZ10KjH2Vp6Q7q+;^Z`WeHf]ZgIIg[Qo<:=UDQ1)?c+$lADlrTY47C5RXM)5&\knrH#@p<Ib7CdHB9,61U[p_<
%iSE+(Q-o0Gip#\)iVDX"JoPHAeYS0AU@4+[beA5R<r3GC\,"s`*.M8&f)n,(5'`3]?8$]^DYbGlj%d9FG-C3N5c3(8?Fj:/Im/1b
%\f\AIKAG-$/)/<EcA/OQeL+kue+UcXmA74e>B=],J)Y#*M7;T+Kt2CmnA*4^0PaS*4pWNtBo,^mm8iOQq`RcDh_V:X.;Oa>><CL*
%I'C=A+/Y"/.?d:E/%i"17f,%c%pmE%4/5a(FOiC?&!^lkfPuLMYC=@K:'3\pfSi_AC4/:YHCIZPa8b-OmX;(1;Z/@jF9#i\KG@MU
%IXbucSa,OgR9&(4Co(&n0s@*%CN3*H"YtsSH[>[1+bQflA#;/4Z'A)7\MuOVNOcr+Waje-R+jRY^RIAYCTar@ro7Sp<H!9UjE,5j
%Ms=ARBDg5HU5H)##k'=G:@I"<c;U-Yos<e#W[H9E0b2sA3fQ4q$5.Wj(%'T\'^3loRj01@S*\kOV6b9R;$O$q1EfS%?>jISFW8A2
%*CWsABL]M_qD'r(+bT(RXnO[>fr7s*CS0uFWk6?Zk2f#f]t(>eB%k`5<%ErClfG0-3BOQfq)OG7YoR^6/#l,eg9hTl+'PkrWB(if
%NU>'(mo%n$[bZBiq,%$/RRS%5(d%=B7iBSE`i&.[=-#/k3a-C.T2-eql<JqYDn"n1r701^T^$%47_H8:rqZerHEf.;U["Bk4FCO9
%\#pd\,AmCdC)gJr\S5#o9RCUM=5/3AJ*R^*37YpWepSmqeVEIM[1'(%Zc;6=]hMHtdUGo,?b"h)X3YufWLdG"]ZR$rFLD!X4cLpc
%"O?+`nR;8V87hAE_>)4<pRAc;Q0O,,Z^FDXCo=kn+K@[RV7HKCLM(rkKBgVGLG'aaY,,%p\8jBl7MRd;'#)(dl[6oans*^45(5_c
%:A*iGqp4lYf5moj5BeSqM(6b/alYdYPc)g5W,<R+Dh#GqVg?!:gU^X*DoARu)'Z`dF2?%-Ej.Y%n]3[t<,6!7S`o!7Bt\o,FHC5t
%0mJ`!?d4%FH+_/UGrN.\MDt:qgq*kfoc]i`breqEiK6c4Xm+r8h'gfGX8W"A3)X$Y<07U@'aL#OX)W%sW33QBHL\!Q19)i\>OsQZ
%O03=A:G]#C4,\#$*1f;D^Y2t>K4KLO25qD<bQ\#Sl6fEaIYh!?h65%CWf(dGdC/J7X\V^*-E?d^ftd\d,r2R4j-OWWk4/YS)@7`4
%Ki;LES[Wr2eOo&jf%SBt=aAGESc3dq5Ri-]G&[+$[D5FPoX1rJ<UOD1SR+3im?@(I\'PH9o:qN8':\bT<S?`q4F-r"KS]jF_DAXt
%j&sTCBlBVIrpf/W2tg:/^i$%`R*2-"o[!9/7TYX8DS=;>gNg3ApL_(/rc[2o$tKjjAbRLGJ9QFK])4=SnTOreaeJfD+n]\koZ7eg
%X#6NhZiaf)G3D9`XZ(B']A-T8Gl)gL_oD#'X0K-kBa<sF+"(7dlPZ>`c<kL7n#t0s*j0A[>ai'5e))4[_b'];qg,<5;;hB8UYW(V
%)/gUH2&@>!62K>ocR7S]g&h.0NG5$J/u=XW5JR3j5q'd<\$^9mBl)Y`c=C,Wr+N\uG$IiCr1!6Pa7R]kZ.-7H+5bq'Ql/%j8UK3,
%/R?*p1A:"fR2IPP8J\P]pQ".65N:FN5&.3*5IO'H:N*,EIJLH61H5,UoIIUL1(=RAc-EG?S?&X8Q_.nt5>.pDR2"4m\3'5E1mtWG
%ojgENDgn/H(3)H+kOr8NU[suD5*!p<p]A1mp"fMmREO8"r9FK6e;_k0rG+*Lc6%H-g%&&4!NL4P8d#mnl='0=%5-uB$TUSuNV`?P
%&g"750AXj(kr6$Sr_PJP6sF0Po[:h_GD7H5qQ.=lDW>R&k)hYk2\YX$,.<"sfU9FqVE20aAKd8;Z+]QGB2J9@d>`IX?X52!&ZQXS
%EiADb]%L&,G$5]FW_Fgq7QB$@s5gq!$*$(H.$Hm]<1VJES\oAIhe?'YVP_?J<@%19EH\,`a-_f@pRG"/\[]_X3k#"CL^q`Z@<*qT
%W.N%rY/O*NeQO;"1=^T-`Q[J-SWZPZNKgb#%aQZ*guO8LGAet^[H9Rg+@Mk$igk)]E`]3pnT[4""Ytsq*A<Bf.+`dUI[JXW#.@^7
%cED.e@Y5L]T:[R92qpi='Yn&pBGg.LDZk.Cf\\]<#AcSokPqV#>,[4.8`Y4ZoC)=&FYX-3Er'g/f=^fp*NH^'>^i9THQS;'!WD]V
%O8@uar\H/Ubf-;c+uBE[]%f.*ephRI.@]9m3cK@iCJt$7e>+k>H/)%CHnt@f']BL%;%BP3n]%,iUjl2b,(9g$gTbS4ApO3lhUQkL
%Z$tm&"<OI[-@;.*Jo'4Q=0!@B<if'HqshXNqM2>?`HDNFOr#O*hV-c=_+T!ldm*;Cf0,sa/*?gs=pon?hFRL@G.sBqNN*NVPn3<o
%]Ck.\+Vu'hQUoPfNJ./BR`jkqnNP_gIDXS-`31.s+0oH!VmYr%YP;[VS,RP:<5+T9.AlA#eMM%Te%7b_5E#279qVaRr_5JHopf_6
%r/,3^Mts9\(>?@RGh+=bp.)M%OQkID?ae1\cg;a0_bTCRcMeM:f$]?:f%"af[mm1YkOG0;4]InYh\Q(Aqe8YbB6_^62U7n=[=?P%
%j'pIUA,"MuGBQceZ'86%UL(Pr;sfH5>,5H1;q.slSU*$j*1\su1au)NCgCmY,0EB8a,%5EoomNte<&:oC3f"-(GSCuU&3lp\&Fb2
%=VLO6.67"25aQPrD,`+q?qWunUG!Or?,!S4nGu`248;f`!9T>+-IB/;=Xp16kI9U,5J4bTVf^V%Z,b;(PROL(YMqcO,uX@s76kTt
%LM!E6<.?aJ9<j@/JR88>;)dg-[JhV&PMXOZopHN[/D_u+eYqSbi&T@?nG-3;=7[3X69A_USP3s7bZ*E"abW@Am6jsU2GFdOSiZZj
%Gj4%_b0U2drL;2^IUNVb?0`2bjisBs7KmTk+S]G/X%o]^$P`!J9O!Qnh!:<kI#fDuNSSEaidKIB;jT'>H4Xn:e$Z=UMNO\L_q*'a
%afANcKq5GZaaW^'<7]n[Qki]6K/,$Yh0N]PO+_LmZe!GU(8B[Q/e4;OhCWA?=ggeM2<l`:;'MI2S$(5Smq/$F8uF-(45GG>NB?KZ
%%+"CSf&rCmr>sa.[P46<c-FJ-if8!1HY6/pcOdT2XNgs$G"s*:`Z$[:ZeSUH+`lEQkc-`u0NJj)5c%MYRm&5uPD%K>(L+I"!)XEo
%8V;^SRlY2aT3j[n\aF9J<5uqQ4&`jGd[L%p4X`M#g$+J_7egJS0,F$KTLgmC$92d1R<:i-dn@+F<!>nB['B@HDb-l.=ub&R>TgA,
%.uS<Vo=</4M$bqcZ_Iqb6BR=bR3.7q>+aP6bi+?nN6DY]0#?_?quCGsli(tOph#Ol'Tc3VHZn@LdD;F=('uo,q;i+%Y@h-dHsQ$U
%7QTcjo?Bo/kIc-ml:lZ%B*M<*Jdu0U:ZPS)e$r0X;s]?0N$rdhSI5R@h^IMk$?Y_K'u2P&1_;te62I\T-8AHn&I<Z0A(96D+.:65
%(;2-MUc0q1JpKg30<Sq`KYO%O]ZF[m,BM]+-!ZTJgAqLi`HG\lXXVXg80Ve\j&Th<C1cqTc0QkYfkOJF9:P[ninNuefdH/D<ho"m
%X_q0[KRM2Dd<X-"H##Q;NJh_10lH^FZXP$9^A)l9hXYg8I`'h3b1WRrTLh[$:ZD+YdpQO_i-?Ed`+HgaG`s4Ue07_0o#i_.O[4G7
%o9(qO\XaM,r+9Tad7ke2Y4L-?!LQ+J@KHugH/R3^N8$#(>+Jo)/K3J4Ct0`iL.b^!PSUMAK50TZVUJRQ"r(5*\XYZV?Rb?%.-bXB
%:`XD,SIc5m'FDr_4P[,Uk["hn3"bFqJJ;qJKuT^]e]93bS"riPibg-\L:'.[etce3:u=PWXDHIf;9hdBQ=Y(8^*#?l_\D.X.=SqZ
%DK@8\mAtO!Q5NAI0ern!ep^.@I2BB];m9i:)Tg[=i#3;=Z\DjQD1Dk23]<oP3(q_<rFgbghR-R&P_0MVY2.BX[#.M4XtuF%<fMFg
%X@b7$'1#)5lo<F-YDc.>40epUDR_*qP?2?7guRS-fUf@BHRXj=kW8a*l#.AFiJ0$[e$plPhj`$tCqXLeV?J`?m_s89)_0jBqV1Wq
%7uQ'mD78@DL2oRkdhPa8_X"0^fG]<Si*@(N-.PCW=ig&h.!l).g?[ur&VR:,3+:\)3%q!GdJ<=m+P)$1<3Lbuj>`f2Lb;er),9A&
%mdhZ2/)k#M:6&2l"0`4ST@na$W_X%3>5Qs!">"t)q`'E)+2PfAa2+X\O(m0p)A_buj<?'15NYb%;VBR>%]r%Za4TI/]?o`kj=&(p
%p=/`BeHsu[Si/TDZ_tMp95X(;Zk&g=?SYp<#WLH+b`?V60@@bi/78TR%1UqsNQ_Gn0VEHuL*(FnDj4s3P=9h^X3OD*l+Gr1cWc-X
%&OGrop;=oZV;H^A?G'%tUQl4/JT2HpW@B@Ge4&LVPoYY*S>gD[3Gr*Af!q6[^dWVYIhjsN$o2qWf?YQ0SYr3Ol8AXmYP;(lpJ"H,
%5DZF?=I-QTX[jEmCK2P3Rj?@Cc+^a@1@1$\8i:7Z08KdKL?4Rq/PrR^BQDB@;j0&!(b$teD+%/CW#m<Ao5;DeScA6O'Q`mV7MgZ1
%la0n\+>]O0^AM6MfRdZ6l$W<;I,)[]4In,iQZ"-&Fg79T^AM6MO_F#hs64q,\U6YS39bhd\U5X,eA]/Nq=8V&JBVu\q=8V&fTqXC
%V"<]7)kdtI+f+_kkOM'YG(ZU^jlc1@40<ij?ZZBlG,F#8RO+Q?o0,5RC%YP'Fik+(T1lZ(m1j!>R446)V43)>DW<mJlE^)iLB''5
%lD0dFlT$JL-e$aQfm7+-8t&Or/)+=FUpP/nGY;kL0F-A1^b'*:D>,<ii[q6R*B/Zi+'T3>?Dia`M#>&0[lPh!pF)ikA,]dh[<"(+
%NUQ)6U#+5-HIuTA[6W:YP:p.X=lA>P<)XI!H>?cg?*C^.FA9B*DRf$bPUP^a5pOVum4Nh?-fIO;9tT_,In<=V!cN+FLira*X-\F:
%A0(o`"a\*&h;AHsm7o[Qij0YHh'6-NHdc?0Z1Ilf':NPbL1cfn]UbJbg/HGc#gXqNRSha$#-aZ,0Ws/EnQ9#i=CX?/;7YFQb@0[W
%dH_ss5'S2%)3+$4aNR/dm,Zn<4lmC?T<;"8/)T/Xk(`$>N\2(,b0H,Rm]=(CW)J_ESJo.rC1ZkHQeb`A&&X7,47@O;.=B9&$iqCB
%_E!<UF)nQ4@O.+>bd!^&%7e.^\k,Y+9J>%mZco(9]B\D+oZ"9)Q'@l0agG@19T-oKrDmA@<G/i_\'t3G0>?mu9rI&^5!.>`PI_R^
%)d*H2mMX,?`-cL/J%CU1cH8NU-V$.Mq>ObG,+R[(At<I@X^@#]%>"\G_,@t8Ll8=F4+f,2em=u^Pd7NVm1a+ZgD/':h)UY3;Ak\t
%9QlA.B0ULu8=huNRt!WFLch-&R"]7&DVnEf(?Sr49O46sPacP9EfHZ:$#h/;.;;'/k3AckT^9%eZqfi2:4kT%((G424"ZXrSXH54
%2F$5?3kdVRDcXhYJYI0=,*Mm3a[*BU^!&Ns`:B]YZ*("g9hq8G*iHEYAA;U$S$#uT$`)tIe1#C[aGTej*K/e,'B+!K\$&?pB#WOI
%)o=MC2[,p7C8J.m=7Q&tOQ]Cq/cb:.*kZJAd2QrG8F_);hP3$7PsV&QfC+0!]t]_%ZMiklp(G'\=sH;hFPG_\0KTQMitW6k@N-t$
%?P5s"Mf2)nlr>]J83cPR,su_7bfnsr:rEn'@CuKs7"D4UBtJIsPB;q7\>@m8\)G<hS*0`:Rj#A?Z,JUg`.F)i;uCsr0q#`nG/*74
%_#+m22<g+]-89Z$G!^J'g#m->"M36/5Ti3R*SW(TYaPFf?>ScQZp<cNV]fU5nU3<$!pTl#k2if+%P9IiA)$[\1\1h*$sP\IYM3[A
%+_Bdj%6a2Wm$=%uP'Y2`jsJ#q1\25`Xi)^KE&7)T;U/0/CdZLlM_7PDS]prTbgZGYh_mITbe,cN/Rr&lK.d,*nr:TYf!b1hW:8B]
%f_NWL<bIPsQ\g\<I;4>>_6a/=*u3UNfbIB@531^]`J>r)@eWb@AZ$-76&u"R=H_N``m4JLg?gFMJ/7$L/[Re2GYD6O`*BnO9VBI7
%*0F;FV.Z;-,q\Gm1\0;Yk.\Y)+aX?'l*S\)\92rA7tPO3<!T!*@6@jY&*Km$6BjDM$bEj$BRoWO@tDHuA6S;Z.!p)#j!_.UNSTCB
%H6uCrj4n`U,Di0CZ'"-Ma9uE^c0RR%>>mGI#;pahm+&:J-HQ=t+XY<;r>J"cX?#DQ+Z`.s@e9CtjG(j\L^$bO,?ir-TbC86<[ZG4
%9(CKD+t@ia[I,tdllDmQP&h=RYPXZj24uJ^'B=(PVFtP9$\RuF]PO,se>,44e%4r^MDhf%UqFpc)/`@/@'S"o8U3JqT)C"t`StUi
%%KAeYo$YDd6VkkJN2IE_i*]#+U(g(+k<nEC?Ua]ooQL(Z_G7][g6$?Apa2`\q*E(GJS2n:4`Gf\bN>ZB4[Q]gQ&1W:Wr,>_>%e?n
%B/9[&*%$8`&MaNqY%)T(-l.,"2.aAWiM*gJ._Sf\(,d>l+R4Hgr8qpHgAZ'&>4&C5Cpgu.>q`nKHn^,q`d7=&a3F/NS(#WIo'-%J
%k1?mDJ*iakdHQYXo;h7?CO18BP8T8m-._)&+&^PTN`Pe20[(AC$^)_$DZ%DkM&u&AUnTFoDHpLYV;7\TB#!;aKk>--0:$cobT1:l
%ou?MKo$:HQGMSG\T'^?oGStcR<P41dHWETQRN+>%G:0Pi;2qHIdI#_PC-:knD\-br-Mog03QZ_[gU0X#<F^CUogo?f\u0Mq3SOD"
%Q$.ABQZb=HAQ.E148qfK*D,$b3-fn$=NdH8/r.>7q]@SmU/'Is3no[<m0#LL62\^jpj8E5WYR'sD]#a"I,)Yu)IMYCf*\0%0/bmr
%C,1KD?T<$=<HFq4;s)_l]WM0=p\-"n>@=Qp)dR%//?jK$=E;eer:l==mQer[0g3(B/%\t(?$<C5D]Vb.ma/,g9=nDH,kV;-JZdVj
%2/JU=[B8oYbU.B<F3dL?mN'Nb=g-T:_'.X9QeB6_oc(OOYMd^aY''#Y]0]rG(YGuQ&igE(s%E$2(cT]Wf)qgcXY"]H?e59tmtlI@
%a)$&plq?p_['8Aj')U+_qF8oZZPb$n0.i'K2Jr^mlq>OeM[!+7P1Z*:`m<N"hfiO:N%p0jmia"NV4eglHC.:MM1'*PJ&+^fQc-VF
%FWPu)*)^6Q>#o!X@:]_$I;'jmOm(JA_as,eMpcAnm][?$o$6G;@U`\J<aT[0l7`kJdcPNr!^f]K9<6N4r8?_R'Dp5S:eYXl9^GF<
%_t:'3""!Xe;0BX)\W=\C*34.JM1*&lXma3B,UthaDV0eoI5A"7`4e&ECui(!-haA[(nn&"TdKK0+^hY>:_W`S(0cq`mfuVS9?ZTn
%\@@/=p8+Uj`>2L/Ok?"deX)YA##FSY@n4I:+&69PObC"`,ke'Gojr"Y_.jGG,Hf7,[`Cst1@9/[HPa;h@%u@gN:fb$WbD*+@D0KO
%Na^i)QWC#3PG><cr:3RB@]\j@#B3(1-(dZd3UD(rXGp\0Yh;mQ&L3_.f]gpYeu=a/cqO,FC@rcNBm&E>7eR1bq\NgDg>7cnAWt$3
%HI6.@9dkq29IUA&O)LaK7*<O;S5>e@X_$Dif0f+6qW33hI5XO]p"hA%b>C09$EQ*$^&1[tV#/C#.s1E/Qi5;/rkAK'o]?=F2J@,*
%J]n'#"X2dqIcjRO&2NGJ^EWJO)gReMNJK-u?FCkeL61beZgr?EX%.IsU[*2TGW?fqMf/tLjEBG["H?WU)*FDPH,%`*%ZjSr9/Sl1
%YKI@ah5,4#j:MeDVm#D]A!TX32;^-8B1V"R396&XPYGoiRDHan5SptLN"fkZV<R%qF64E55Lh6!_$KYp.XbPGOk=Dk3kVRqVaK9T
%F]rmf<L99+-]^\d@CJYKfn!4&#YX<Zk=Pja,3j(VN4Ml>B[EGD=CR^]()Q0Xe"1"6T'`"kH$qg0=.[4/NM*n_V>Q1^LZ8gUgIA(g
%dkA`d5\sJph<<R'QH@CDosknu1]'X_2KLDW[,P]X>IFPJ^TFN*_k+DSqlD0W5!(L]6aKS[+sRJ6BIT`!R[GT=4_]K@6_Wh3$7')p
%RN'brfLVUMgu$O=+mLYq1d-)uOZ\3*hf^=6OR2KmU=_`Q:SHupYo%>`\O6eDoWR\>0a5VX5kk8Wn3b4GIsm<s`4^XhFP7;orQ@"I
%l0?#l,[tYWM^;^=I.(Dc(O,@qs2;:1H1bOjm7KOWHmFgn<TG4HT'uUsl#JHFHnsd5rSG<+a1(*cQ_EK,nLYkD/oL2qhqH_*Qi(*:
%mpNV@hqH^WC2BSoUT+JrJEK;@p:^<fQ?jWWN@KgafAK`aN\3^VKPY#6+uW;@n^b8rb!+QThm,&4ST(!b9D,Qfm/*$@/StMK*Z%_o
%j8$K!0WAl]p":_O6qi47M,`*/QnoMIf"1!A,r3r,H1uXBA30MK")mk\LZ`rVpi_cfWp<^0`?2ni`6?])M,Y_j#3M]o"0R*o<ms37
%N$BlF[SerKWfY30;-A]XN'q9QdUd;FBJEh(>)[8N8$@3IlfUJfO-<*tTRVV87\?*:f#;PW]&LVq(;I\kcbM?28r[KWA_A=eKlgUg
%aPLu2aeo5JL3_7F3AA$s\Gs4rMqkYDip#*@H+.N*)qF?AKf"B*h6"E=C9<ke/6hWBMN8!SCjt*PGea&gX0oOIlb.eSZ!OusfN>?F
%j*oD)B/'um2PLrIZ)H=*FD&pZbI#JU+G4BKQT=g?]j3bJ"Y,\'=+5:=S<XWKrg91&4kbj.k\/gTFs:CBD#:B(8_)IB^]$-N.Ze(?
%e*5P#EN3C;0)o,]26,&?[8qXZgt&5?nb`?Vo,e4@1(k2>AhnGg=ta7-e9jMl)DV'\X%2P(^0"!8m+0!d>;,TR&0J#fj>NTcfR3]_
%PNpX`rPr1ZeTr.a&TJUnE:iidPKChqdH++-eR1=VY@F*f>GA,ndc3/RGnoNrSe\i(&:sIoY;4:Xh;*\ZeNk@CcKkifa!].70?"nG
%,C'*>D,cNb@.N=#X(g$ihX8TC4!?7hfpk_nMsaBaS$"D'UPfacO^Le)>1BaMFlLLZ3S!D/MbR5m($W(KD;;_XbhTT@Mqf)(4.T'c
%pUCt%^6,d\BeD>kgUNN4LR'njZiB[-DEC/'T%cS0eVqU`hn+V$HeB@lX\M^o9cH$F)..b%(lLcEjX"NZQ[9`33SV>M=cJUAE20G6
%dS-`q?d*:%MFPk,*`^gYXeO"3H');lr,*o1heeJ]$n3FdbLSA5M4eii6\qXgfc%^NPgJr7lees!MM4q@qhRcjG,]?gj)eSN7kC1>
%f%$feCtX0N$H:J'>>]:>Aiu?f2Kk2>lGC^+`d/Mk-X@jR>VLoFS[g8301?Sce1\\B_sE#edUIT_BmKI<d.nE=*=4g`:POZE.G54.
%h+l7;fipdId#"qq%<>D'QhXDdWeX)jcLgC6e4!iVU/!052q(FmbbH!^R-K!gP'`i+a@hJls4#iPOk:OWfm/DVojK\t@s[CW_U'Rf
%6R?UX%"t`dTOK.nPi!Hs?#N@'M.p6K3@`lZCT'q5LWVG$'3cZ=3GCBdj//H5`1m'`M,!&Z,cVSu:Ii@n+'CS7VF)0B7jJ]15:&&@
%LKXG/qI\AD;A/R78<Rb(IAS:0j<`7_:"aTWeOtO"1ru*9Db=K7>B99H7hV4rR2d+*U-[V!mNX#4]2$bX8poHYeL8hJQr2E*AVD?l
%>uK;KAVJO_r51-;9FX2ps0BM(m[)E4j0D#>8P]kP<LK0gZ3AA,/dC\&ZGP+qh=*'Jbh/ZB)lpPW<]F"LIa8$I.u]3)YZ_:W<CXBV
%cO+57BA@[_/MX-lKnmQ;-l_$B<eF\&(i<M?\Z2:(]r;ehk(f$rp-A:piF,D<A%*Ij"<i[L!"S$gWu`oVbig@%gYk]SWE-]=GZ[Y4
%#JT[]J%LOYkSi[%_]fCu6b)WI-'VsEJ^o-(i.Zs^NCu`$qRl;Os0fgiXL%@'&+c9TYo1"E$P-1JWlsr"I9_#a^S=M]V[[h.@K(,!
%\iDasKnoI[+'U'1_M*d@[iHr01Z3tBq>P?a[d0M<4A=LmV/A@78CI,<&+d&b'Y('Fd"R8N=I9@&iPNM1ob`)jq*5`;jsTb\Ua4(U
%Fl?d*HAoB$0]oM1J)OgVURckgU"fb#GBOD0n1\4SNVjQ]bkf$B0QipVRMFV;)Z7Iir%6c&j0mhEKnkdIZG^U8,De4fqRl;OT81:n
%*VdLhgbF"B!^2JM&+^U+Q)"k6iF,OV'Fp^TOac%n+/pOM(EV_B2WnoDmHqd.Ho%Dfbn)KibeNO!^*),'KnoKD&$?KQjheq5[Hkc>
%KRPR:beNPL5>s`,_S^aP,C0"t%Xe8:]^7D"'7#WT*Yt0pHG/gPQR`F'b%@jc%hjd@OkU@W*l4Kc*_ISK^$W$7SX+``@D;8q/SR@S
%GaN.A>i@,h_n#8U.(QkD00CeQM`^-VLD!8->NPaon?BqR>q$R2p7J?<D`cJ/B`hXcR"*kaVP+7,n1[5-ERQ$jXn?tu@K%URA-ApY
%$P0QVopi0Y/"V!n3)ad@%Xd5DO1o8A(EQ&1=Q6d,J[Qul(EV^s`Q2s$A&I+T4Nt8OeUlk4(EV]dl"ZFS?l'mHhfbB!VtG2k@@h2O
%/Xp0RGZ`V()=55XBQ(n/43YoNl1Mp2r4-:493Q&g$P2jl$=Q3YP%Q'q>oYgaQ"JK5EZ7U:6nE[/I&M'i5`5osEbOUNcJS(49qmU4
%1hZenFSTQ!U&\dHoai"?BmCL%jX5jHX?_i0-T3>\B%lImjm:1S6?W./@NU7:U=;K@e[!nEUN><sDlX80Mc9>i6[-fJb3^9te`KMA
%HFFrKF"<RjT>j@p3jYSsg[D.P(LOhoM:7OGS!+@YV[(]D+4$>@kFE[l](R66%_f,1Hp.>2?U#";UT<3X+&:)DrGSSuhVL3:G,g<N
%+0Kg"B<JEsb-O;cgn2WJ-fnFeT$*a,40?WRRH[bqSerJ`esk2]A)bP0fhVj^+3J$fE+\pt`8^l4J]Xh7<bl::A9@82cJb_0IbZ?d
%\oh&5D.@/1fREj?gXmB^*Z7&[7mC1ZqiuldbE(cLp@S:1%5rX!B7;K5g+"`Z8!hj[UQg:ACjkfV>OClt`bBZ=f2IqJmi+lE?#FjE
%5AdSECbMnBh5Ui<faWkglbD;Qo;c:\Va&HRd"ZG?5']Yn+-6-=C!C4+IJI'7R%'O,5FDd`2:a-N:3YPgIm)UlEl+eCY:S.&TrY?)
%(ArfaT-,*7mIo3+hSNslr\Fm<AsC#^WTL]**EX9W0`!i`LdYe$`o'_JFk&H/)sNkpnSsOrEN3_5>9DIHI9<Upju1DVF&QB%Z?B:M
%G5,\BgY)J![9`7e;)r`b<joo&GBY!uhi.#%>HRRVneN2%Zm`8no5P!7RON1#:VLYkm-a8/>@/.#6ZV5$<]..7T!iMYIYC8ar*dFQ
%hS#C;WjQ1A3:BZ$-Ar'**2_)Zk(C?f2HD!66Ih,mPIG(%?"]HEJSD/ZG[)fK,;$)O^&%tp<C/MO.-pKsQTam8p"/Tsfung(gR$IZ
%X03"&>>Xp>]rL\DdoZ?S:4KN'Gp?\C7V1uCR<^1;<V.*bQbLQXLA#(b@df(sEAU=*20TPMC(aRE_E`j@ht^0\Q1#JF6p&_Q#/[Bf
%L2`1^9U^8aGJ+(t04%f^*fdrOeW\Oo[E%DqHYrfCa(t5X!Ob^]RA9/E=7p_$7T?r".45`j.!8e6WupM5K)%8)O(Tef"PWOR"-8dl
%p$hUiL2Yt9bKJqLa71akku3j;UO$pa+K9h?aF"H>bMK.Nc"cY=eDg5#l*Kd/>L$$D")#+E[<)=J?Wg.q]rcnulM7f\O91j/i"^m"
%nBS`ShM/klp?HburT;tmd\uX@TTSF"p6Kh<+:BaN2qDg*HCRY)7EpsBVu`;]a9TW-0hLUlE7bDp^,`6W;[@lD)s5D]hCRouRnJrJ
%s4*SleoJ9560I(RD"6,J6TB<d5J/5*$T'$Ej*?o>qf$8*^V6)@3]CH$*A"8Mq/Bt^n%Ob7f/.$>YD9k>WAWL3OdJ+D^OfR6Z"D\9
%'\8ZjSUGqIhurd_'MQQld>?-+2?*7Qs&m/SDaro>4Wi\lG[.TD7ct<.G=UhFNOM`:pg!4&#_E7^Vb$Q\c*6Wp'6!J^I?(:ol(uih
%iYU];PK#oa2Rpd&\5d$"U0bH$6[j66"r-nRGSo$"*2A38=.uqQ>du>;Z<<V4,-\[E7KpRc.d2h]ZX=.<,7Z_V\#\b_-JUaOa<h7h
%(5+NEbK^M)^^DihAnDg(="Q('6Y8U"hHa$Uc1uuI*YGco^iTo3T^([/f1c>SDc^JaIR]6pZ/-=Eg/b50fkI+=Y_-W_5a>=-/_jJ\
%@j`AH[FJOHmVJ)_c'$'u.Mb.hZ(?bbLqoYq45Z:HTS]d(/soo43b\9#NF]^Y>A+%F_$_bUFW9[;K.-pEmEDp`NfsSUB5XX,m&iKl
%94b(_V]0b8?+sWQ+_\HSgR8F%m"gQmB,$;"Y"rj@*4JiQ*:$T6LUhiIA#ed^CX&]6)3We?rULiOXX@rJrVYYq):.4Pi"*R*m%RLn
%5CP)_#nD?HUOC+0hJ-]s8i*=5Hj=(KdI#`J\?J$;Y8V%D\krJ172RmTQEjfY<^4m[aD>;*8RPP^pJcdq932?s-eSFg!spfT9OPQ$
%89dfKl[].\$u9qs4ka:E1$s@q=l!PB=L?X4/r<RrFlm;qh%e-<c43i%(:3gO5"e(edJ70uIk1?aM>30]b/cs>/=<YV.jb664EBM`
%i.Fs.I)$X`BR@=!">;/eUbZ@in_m%n@8=F'SGSlcOq0bo<IU;?F\=b;,"u,(L`u7CWgGL*ZnJ>5$#&*dGt8YS0]>)u^=R#l,p.:p
%=2o]\#prUe15,`Dla69inF$#ZJ]bt%ZT_:f!Rkac39]G\!@kpG.Kosr[/NN!?dgE(M%Md^-3XXn@0^KPSY.:K2e-%;%3b2SLIqQ7
%"HKh-l9M'IG.eJT^mS4?LH.Tt@jZ&_k7@.)7"B0nD!s?*"CYq\5\5R#90'Bmh8M_!Cs\c@mtsK97"Un@k!E[H162ETe6X4G*;3s]
%%!3Irr8'gl<XDqS!)$u:*9R1jL69dgV?QOf6*Raj_U0FZfj-8SF,f<7>P9_Pgs5c"=^H"CVl@g53_,ZHUQPg.>,n5`Ua3-L4(g@K
%$4%r[-uZma9p_%2U+.I+kIZp0."s/@]U18s9%%a"lqXW_#8t!AAp7ZFY(M%9#e9;7IO1AWjc05pQ$68q9!jnbVF7ZSF=Lq,2$>jF
%-Kha-\h>@Qo=\B]:^MQ5:=eIYlrUP2K%gT]6(=\I)Z-uO99jC#.Q!N[UuP)6f%]C]!E#rO28T1%0_aceD0$=OL2Y'_5PTIKfu4a>
%,W^<Nd@Tp[L\"f/^jmfeW,UX\S5ShrGeB_+K6ljp_nBWj1+cQ7OZGL64@nH-F"Hra)r#]dhj4N#f$?!RjRrp#gK!JPlbP6A@'=-@
%Cc33qJpC,r_=l(K7gETC!Sc3N?naUjjbp/<id!o1prli&D>b8gZTQY\I%UaVK^WS\J+;?WiOtun3CB_n$jnB?E(@/q1>2K>eX\LS
%p!*9%*p>W;-rUh>oC-:/5raQOF$*]JE_p1q[csW0E)]Wi)41M@_EW8>G]'drgWFlInrYb`+(clMZb-Mrp8B'`b_GqN;nY/n&/fgX
%Y_-$M0=0OoIX'Vfl]#:7d'gs!kQs68$rpb@![)ej*>fAr3AV?bmqc]XA*n*te^od&r]Y5h?[KQ]oT=jaeh?4#Ydi0KmJ4HRrd.kk
%1:Xj?lQV400X$2^QkOo>N_)8QY;=B$Wf;F/i-dDb_Ec]K-[QYrM(YmU0<b-60-8o]q<kOb)B3B$B,(iSRa=\.jWH)So!KA/=)DDV
%8VGH*-j!QdD>hr:MKnmO&VK),b?K%*N73lJ3:*Ql9YLY3=V9%BC%Ce:r_VaHa<tB^I/t42(opX)a%iL6oo5A3S&ZUZ30WgQ"2Cup
%9.ma^SqB<.`(7c5]]APsI.75ibI\M'[^M'-<##a6iKTCm`-/1!HNJEU]!`'YZYrIKfUotol!NsO4%^"9BcE8^][G!(,g\>0TYJ-@
%2;F[L$kc!]lsQ3;(tZ$MCOT\(,pmju966h]7qE9cj>!ejUi_ZB`!i`'.UPDDqsU1hr?-&0DCKN,++C6Y?5iLfEU3W$rDREZjL828
%^K&nZ9_7W8Y.<AgfAG3[f%Flr^-'u=3i0enFmX9\D_H&glaP-NHAS22idUQ3<27\'`s7]s[3#)M0>LfLr"e]_m#JhbWbm2@/s`nb
%7m?jP]t8pu;qrRVdF6^BZU^Y)dJ4mYnF#VOb%UT^nJ%arS"gA2TuH"b=\E=BLjnn95J:Cu]&!!Cg;]\09<g#T'eD#oXN`sO]ij/%
%gWRG$l]7=ujsT?0<pT%75tB&F+rb70jPoYpR(34>RPaba)jN=giTL%#r.cq0;#QI<UGE:c0c;6cKi-eBB_^)DdFnE:o'!s>gT/`m
%D'd+;`h^%49:K8RS^i7f;'d[=\Y1qOGf<Y.o[8FDL=\<)ie!OVYM/b"='^!Ij^0ep>#oQ+i!cB7M^`tr7"?C!'acTqjHik(oQ93'
%m*)EDD(PUc?I0mcGd0<5l^uK;i>:tT0JFof0<=*OJYC&<2>TCmUcrF6dQ=L@.Z@o"K0&[rD7/Nt"aG7r7`!B$=G5<e2Gj(2\V>gk
%ZG9G=1)Tk[/IP7;JkWXFNhW4fP)JeRd\aYK8JB2;O"t>PND6#nd/Sn>1cBcV(%REQ6"ABA[Qp*4K;oA#dG7lS*$e-iSAfl8K?=C`
%:0ch0-CnS';4p<Q;!mV0cHiZ+:XM-8EK.j=+-\@Hd':F(653r0oU2&GrE9b5\ML"^EbS$>e)ZAE:J=F6SRlS8hkknN,Q)W1A..PN
%o]kXQ+TeTYk38*glCdG@H)JM+jnnkm12W/Y-XLZ'8_[lK9*rb2j#5`;h3l+)1g9Tc,Kbb%g?#0:W:^'O?]7%@fE`>YbPm:QNNWk.
%GIh>g$:rJ2VJ^jds72h8^)uqMW]Aa'1h*W=`"]s@cX=sIg"EF1N\;Rl3$h";qhi?@[A>7ViJ4NqXm0[sDK@nRi&%mI2C9615/\5,
%B_JgeZT=-BqlL]qo#ATTgGPq\S0A>9mdA`[o#a_iU(rc(O)8f2.NCp+bcSm(S=cFT8K@I\g(l*"@+rpmICOFmC;HKfF_LoH2s2XZ
%,AnAH0\VI##6*Dl[V;TQEcBikE.<7=?[q#><I`;$%aoR@9paC&#l2gr.j=+DJ'M.&Ti7o==$k!iM6)Z408j,[57J7i)51OaGKQEd
%S*a.rLF\o+0:0_B&$aULb8M$H>P=%a!_!qc'/7eIn`fJ"i'V'!_?W,h/8%BWf:aNJ-EM%]C?iu.1RkKIj"%KdYKO5='F)9:'jD`\
%Q?upZN:,Ai.7`"?7ejgi4Y3_[cB`f`Ru=IIo'F^%fCrn#Bu<8ATIMWNpoRo:=$kSSihiFN)H+ZsheXJbdZE`:Q!b9AX>-YeRJ@+V
%^b?;>r+pq(Si=aRfdTFDi>@0PR@hg@;,f+/R9U&qA`AMF,*&ErTM+\&[kfg66R.WFb&J-95b`r<P[(1f]j>]G"h:N9Lg6U1i33=o
%Dd8:.p=R[i7\j:3:6i^90hu0oHH:-g@Zm&/Y%eOP"CuOm/.<rpeVYtnrJgbj@4>':QG?o;g(6sZ!L`p*@eE\,->E!rf\M>=Y-W3U
%mQX^G[HuTZ"BJb.Bp3X9Am"Z<=!Bh">D%g!<Cmj^j<U;J,?>D?LQkn7K5$OVAJ>m*==)$E2"%5AgFS.QITU\*3-TB&qnS!#$(R39
%mfO[*-?-@X("igUlqQCdcmek-#M90>*I5R=AoLJRVJZ!R>@s^LSkTp_[gUWQT!5)YB6Fkf@7>(I%7Kj>+EQGQh*%W*Nq`7rV(!U(
%gL[o9>fJh,=`71.k'_rG0kMd7_eP]:DU!sC?WLMO+!slKDAI1cj>fl:rI%[,KgS4AB_]g:Gl)XZlkM;#><[+gf)3j<1G$.Ip=&9)
%f\q7X,$&'9OBJnCG7UG4+#S>K2KtKa$[cJODJajV1ZbXnk3Xl64E!.'/H48EjVQWRCMh>IY5)GUG8G8/%*/%=<CHY^6MDa-f8Tm@
%7VQ/C]OT$bYI!EgDVn7dIeBnJmXC%nIWAthn4'kK'5d_#&Dg<i/OnkE'])`m/XH,#%gm6SfG9rpr^#MFZA`X?SQ7GWe])1#<u?SE
%1X56fV`T;=$G_i*3j!U4BSCTT]j@ml^OJ;CrD<e;0MCas"9-2frNKg96-4.QG]47@!0caXPqJK2V$$?jY,c??cK>(BkJ$akC].+6
%,hVqO_:d[WBsGTK?UO'ZV&?4qE=KnGeL[hP?"6U47t*6dC\Z6O?UoQlU&Ua3_<6%;cOTrl.Kq-t^o'-\r3Kp7gsTP&VGTB*?%+\(
%G9cSq^+aE!@bZ(JnskRVfVQWNhcpOjm0!EJ\5R51AnkHLEp]OZGs3luF=D'PJVJO>CudPMs0+=9><;e??Q\;mhshee2q6P1*KIqE
%^g!]L3e>7iPq9tVKSJG.,1AG#Fr5rO5W>WDL1)g0;/lY!#.26>(qM$o]o(iQfU60eo)kU-Q=]jlnLLbZ,/gU:Y%<o:nO!WDQ##m3
%C!Y]/re^?gLh26Z4t2T=Vf]XTVHkq#!%RD%CVhc5#lKQg6^8t%_18EOJVZ?1CCihFcj0pjQmVGd:c8@cH"0f9bJk<$-N"aM#W%$O
%(3.n\Xbmi1..:3UG46$@LhW6t6+c+p^d/Fh<.Y+gK<Rq?>6uk,.Np;!F95pYDjUrB3*=,&fS7SaK<@TS6XXRO!iQpuHr)Q8d%]5U
%Xp2]1Mu`Vd/Hl2b1IPOTbs?ksZEEpBRstWJCkSna9ullu#k;bJ(0'(/4I\VFK6=kEGTQ_n\;Wr^9QK!#T,PFX'B^qo8?V>^oLr.Q
%U4q%=;$FC$<H&',*"W?>,egLkg)g4;43=tb)rQqsnu<Wp&F'hj#i?6lj=n1YqOpQY9[=p`r#HE&9uddDO$0!,T7J5X\7J\Bll9a_
%$kY*L^mU9dj8-i-O=WK#)#G9XHWc;'/e!IP*OA=gmP]TI+>JBlW5&B?I*P7o\hNcppD+E6%`F5.@Drb]@KL4s0JX&hn\Pd?]Rgt8
%BM_7%PX&oElf*\Ub/E^kHk[_8!2O:t$@q";?H!9l;_J=&@F5Vr.SaY5876LjB'?K3)`SSQZnu0C"+AL+_r#Z(6il<#0%1H)n,!4o
%%A,p[O(gR!_=T$Q_slkWW0lOA\%,I\e"r,pOZ1o9A]bA<TS%/K'Ku/?bcrbN89tKZih7oXn;#6k%[tL!D"oi_5tT]eP8Yi\KP!K4
%C-&%Uhf6)W0KV6*'Ej.q@#=>3b\-P[4o>M!.\Oe7Xp3i)#TZ!)bQ1`&1S#,(=<<kZ`g@.BYNS99;<5Ls#F[7arK`4k"<hT]E@[X@
%\HK0CMcCie9k%TN&:R=qCB=:Z,:2\4$*jW3&-C@8r)JP^^bp`*\Xj9sNF^\9gJ#utbI8LTe'N1R?i:O_"s=][JQgn?H,Th5B!YsT
%O7Oqg*6Va/Ct!GtC7*[j<7?&rU"<kOK*nW?.TRd"JKcG[$TD5:LV3#2W;qYS%4o@AJP$g5?<D2]W2Bank6U]G"^&R]F<F,%o(-sr
%1.ncCY(t5Z!,YQ.V!FG_NkfbrM,juWDX&lD-&;^I_`eBW?8G^s<"4k>7b[#62qi;?h$9-U]_`DA]:sJA)4of&g`Q_BQu3a/=QDFW
%aJ6^325j=UF>TPk!<_4*=9&Ek32#RgPK>D5,hA(>E='1pc[74FPmUnSjQ;PTF/B-B*TJ(93rt"!Hin+SQsA^&d.*!d2AKW5W6SR$
%YV/\n,uh<?Fhijh@:JI)2Q(5>#a):P5gCIDI0o#?&qXIIjk:m:Z5ep"4b7N-<&V)B!(Mo&CgX,cWjM$#C(A%Vb)lc0BI4p3`7`#8
%2$j-=3fJ`D5n/7c,rW&s&p4iP%4"B"7m]1bHj:Cm.d!Irkn1ij!C(T5TJlJ3iXZ;[kV+7)kLPA7BrO?DC#@#3b*;\"/#E&B]!Ue;
%:D_"3Jks8%!2g<Em(4%;-m\*dbY/]43Z!4-^f!$YZ@T(.r>*/#d;G[5Weu?G$#s9n&HSPK/Jo:iATJg?@Gb3Q-=h1]':98o152ek
%0HQ0<LVS/=g&.QFTpmVN,`'SKd)'l+2UNWMk50Z3%nmRA;j]s8[-(6nj(sNo[p>KHRpf2&h,"q3D"^:Upj*OB\cOebN"G,?"i2pN
%rXXE'JJRGrT=>aM/Mo'gC+lfTUg64g4/!+00c2T6^f6'k",n?p^<tKiXlG9FpkcE^U4V+'IP?$4HonPYJ3F(gZlMXe"B2#UZWZ,p
%N0#0R9>0M?:,)gt^8MHSdfL0QHoKsuA3(LR(a/ebL_/#23!]8>)1`WnKF&c]@b8F7U$nhY4/,9;WmZ(?]+GcK&jWND%;PbY":59!
%_B]]X73$9VXfJHCDrGP:ZO9H>W<!JO(QY,/):Kp'4G>22K2B?+#otkmiRtSGFq&CW7e=F'I=e\ZL)2PoKJ<`gA;26E6c9rI:tJkl
%(jo`$kn&q.Cb#IF"0j:@8Ea?O]?p1B<_i]DjoOHUOq/s6H//6rQm;fV!k3qB+Oho`=Y\YsV[D_WUWmN$81'/D63)V8*ABs-fHBB\
%&<W(G8b%m7X%,mo:!6R.M:E*.8H]UHE/&mm%Q:a*JZ]0;>h"K1_%SQiOD7/]A%>E#<Z_i6OWJFD[lPQJ`2nJ4(h'_tW'RY?XH7iV
%JJ^$GYh9)=Wj<^UQ1j!c(u$D7<FRL%`PgC/)%=?:Yt\;7%MOHuNWq9oiY4Z0+9^2'8.]g(^jP(A_Jfp@ZYa.oM9:)4@'VHi4TMb&
%pNUCsoO*i5N\i2d!b,_ndSVl2_$1RJ8iSiY9>F9^8:@N]kiXaUU4>cUB-)_fJVUXSHjgBl-nHX"BRu#o-X_p%2qGq2N9?Zk,NA'a
%[`!a.o[:q0k@>VO)9WKk%Y8rA?RU/,^X<43&Y]rY)Ga*#0s3tf,4fZhA]gI',Kg8KQ?Ae`&US(<?SN#Dj6;Y%fSKriQ19:h14b9^
%1tn,I7,*sU_CPu=cs[ZEq^A?+1FH0()\J_j4\>0\&u%Sf`cRB_4%m^JC0<6@+ru6gd`"a$[ajIL"I90h+H->0OSZ-%8!$+7^p#A9
%-DQqBK]*+BEm+*;@lpPobZ4"P*Elp6&@>%<:[)BG0,D,6KZZ0Z%V6@7>mqGO25LZ^c8b%1,:%6,%QGcm+NBPdc"?$jl%U+<1WTb1
%Z"c6T=<u'p(-b&Ti:(L6>[T)kaLa8_8N3(hg.:6<X)5Fg$q!ZVn'g&X=q5OtkYl.+0_$,ebW-(9>d_qV+Ej/2NG5(Q/#H&$cIDKb
%"arnua^QTTpEIOCQNA=bj"g9MH%Wek!G3$X@:1N597t2QHT+[dHFfDc]j/#agVLlF#/Hd[N?SN_eF5`0P>lNO&8!CPhN2._R>_1Z
%-eP]4MorsrWUjpJ`=!fKAMO)!Z:tNX>talU#P&ck+uN?8,2@/HP>mt0OFZD4$("n9#WW)+m>fN,(I1'(ja9\3SE)+.khsUA?leON
%^eOsi97XRsVa5ia;14,UjDE?A"NCXR3)FFA:Pp.5ldsMKVZX\*4X]M2d@-1i9;'V<Y4s^Ekj$0@OBU<c?!g').L&*C#Y[j>&CHhA
%+P2t4;rlC5L$;.QjTb@MX%E$5'eD&kEgos]+]u4V)-)dF1_6>_8jS3'Y*(pW&lFajQr&lpb&TB4(^@iE<n`\R,0CLuJ2(B,*(0&t
%a4?J":a9I0U)cV81o(g25TE/COoc1lQ)^(qKL!n7ksU<B!-JE1:WP<<_.>-j0N$'h/AW'uK]ibA/&i;N64B(5(ToHcmj,Aq^2sd#
%ZB\=R#4i4VMkrlC0+qo+9d=UJ^>8uNR!q<J1$(/-C_9JFKhVA-"jMFQoUa2&,9EYUrp^*JA5OeLoc.3S@kdCr6ACBsVBArjX/]80
%MO@ipbV6+pLO_br^*WW7!ATagX/ZGF9FSRbX_4#;>keeP"teVUQLq6)MfL5u@5?#WPVGKeN)`\e]:Q2K][M6a>0LAPM%DI"RBebF
%:=8&/X5p<"3+-`[fs-p,i7PJ0%17+"JfodkJuHC4`^+"+QjB?q]u@^.I:=&YQ-^oV#-P(;<DB!DLc;79Gl:q&@<F@-k-BPn'bJ1B
%'(5Vo;5bKcoOS&sGVFL_"Ia$o*TK3n`IjFfp)E4;&+O+B_^$jSh2Ms_,AJcT7NeGAdJs_>X<NI#k](C\np.l+#]7RTN(c6lWO3He
%RD.^sL&gMu?$%oW\rVYC\YBGD,SR*Z!I%^dV42e#+:SNpI2&2:=:&ZSTr7&2nfR@Q-:oTS(^-YM&oJJe"$3rr(Ka?T_!1=iOEW&T
%%HB-t%E!Zl;pZeu%WL*-#O^b0(jHE(`[,SnJr0%1d_ZN?<1kF4-ujPige`<Ckh%ngl+mW2aOOc62*aDGL/do_`A&\^gps.*>-/Y,
%,`gmp:bgmun!c]WlJV/n!,Ycp<OIss#Vg0HTE`6V_>q*b_?n&M2S;;"ARKG1$7K%qZ;3'E3RFE/63?p?pWir&Yk,7r?@0k==O$cZ
%[A_9q#KFnZO#!qF%Dpe0>+o72\4Tj8P800$/g7_]kubfHk<OudTXk/'Y"/8(`_#5Rq+000J^$7lXXdZ9!18>.emL&)8KEN,o2%nq
%[tg"k7=`R#<^;b^_>XsmeSHSVT`R+t:s$%#^gnnM!/l:UJUqEuZ#>g;oq?8XOo,2P,A*;C7a/)u(=g[.)&<5[1CRC.<@9`C6<f?P
%Ot@I'=u]=qA?)"nH\gO8!2,N\,D[g>>X(-j:g%A^fDo8MX%Yj%X%Y%`XYT/F-Oc5FL0[DP\8I[*TPg/p2/m&d@Mpe.LQ8>b1P?T/
%f0@,-_eM_pLWtC$a5];;16V^o1=Ji%P7'=P\?6#9IYg3Z)A!!$QDG"rd#iAb>%OC`X%8F*'V71ga$R.+*6fH2D8dc7O+i&$m#""W
%)(RI\Lb43nmYGd"bjo(S*eqPKECG>f]^J[)!gpsr=b^Kn)u>2oP(K@om+RTc/^450LV!U940EG,r?4Q3m5>:0CpB*k=ttYq/eF(<
%P:t(K7@5gnj@Ot/Pa)I61.P2dXI/66biZ0-?QqD[&"(RdL<h!j?8Iu/mFiE@F')8U2B8>3[MUcN9A`m@%=g4s"F;dDMoYPdO_:$*
%@!]U0=_di`BUip+MgE_A!]F_?T5"l7M%^K!k>NhV^ED)!*ToHn-/[,nNkl-3:65Q0<XUZ[d40)U*f6NoK)%&#,#So2UFLpT,d*mb
%U;0-Sf]:mEdW5K[PqT/qBFZN#`^-rY@D*Re'E]M]6]2^6Cg?=)J-="nUo60!F%r9,';lnOJCJ/?5UR^[H.)+0XdI$*5R;8sciCj0
%?[9I#8F$F+XlnDs_d7#_\5nD1)'QMnMCf?(.>sIcFYco7Q>&+1kqXj:#@/0dn)R%#EtAUhki3:)R'*rP:Li-l]B!4`n$\thYW01'
%73Y!P9g(+H'u9)H&1.f&\^?#mFFeg-JMu9]M6q9Rk68ttE?/9<mV=O-0abkD+=Pih!t)6-c$E\LLuo4j:\<sD]/_t"Bqm:(Iu!8=
%$.HX*3ucY"/rtRQkbXH^;%UYMg(0N!@AoG&5[-Peif`\f],YeF+9X]]?)M)3@Z?Vpnt<TsjY:%uS"#p-2?gRI3F9cM-Ed"H]Y9,Y
%ecK^qK1F0ATR-I918(JJ$s,Z$"G#(=Kff[8?&5Z]O97emBg!%eD32aOred_LJC''2@iN-g//2T!U6:U'DUhZNX;EN`@aNQ>\HOub
%,7KZdCDk(E#^VT^2"C\'1DBLkTI/TEMD4TZ_-28Ha5o4f,X?_^RiJ>K#t0rbkW@Zh6U3tWV;5T"$T+O"(X`j0NaET4Cfh/=rUGGr
%6Z#A$3Q,d[,5B[Z6QLd7`17JH`/=>=:m+@K?/nYj9l$Y1ntAI0mJBA$;,=cJ=)3"6lXFHA9S7Dj19-i:hsYLL40@3YV=UIEh_%Qp
%"tAkH!WOi:6\r4r8:<+AAW'2^V=Pd_MW7A'M>0mmH[r($s2!T[,!si7XEA9935^gTG/!_*huE)Yr;H)6s0pY,s5H9CSFZ:?d@Yp:
%J,U\ho,%9!hm&gRU&FmPp9R(Mru1_/TDpM6o3^bFh]b9eho$&V;#Odme.5SLr?-CQ#O#ne5Zdg`K%^`3_Ol>@5Q=DAs1s3aM10sX
%rqp("r"&Z"=8oNm5QC>idEfStTDqMJs6IGHcbK(DJ#8k<pa>q6hu)Xjo^hglI&3Hb/b,H_r<rR2^H[rUKOOuqZHFO5+@<6?;\FB&
%OLA]JNe'B%M,JQIc4c.UlheigRG$&pOGLR=1;Zc9MVph'YEe(mNF_=8N@4S-,pZf]"/6&Ah!&Bc`<;irRdhV,Nk5\?F1C;uFQEuO
%krK*3M1-UA+#\#Q[+SIf/0rupT?236@1HG[MIWocP_=6Q+MOsM@I[fk4@Mim7[Am@YnN?s1$QN:d"#uM:`uuLI,*4;q\OKMZ&hWm
%im5(b&OX!kQ&0!*U6Ojd8(Q'6!YUD-UZ<jrZ8SG9)9625-t,cbdpu9NCc>36YTKg([)(X3qeLinMuL"BI2"eE7o:Un-&>HnO)3JZ
%7R1GQA!D@08_-@q$0,.)"Jo&Pr,'Qhc(R_WX$@_\e6tK8BY<As4fC4R;Z#/#o.AjbNJ1B#3#4/>M*BoAhdi],$B$"$j=<j.2PQ-P
%a5SHpS`7(`;\ikh6pe+_&D@g3k7.*gN8"&$O1/qP0lJBlO['MP6D"Mh(`g!1+E@0R.__W$lG6-'E>3;\$8g*ua+DHQ29DIb<\rN^
%9=r/>,+sV;`]i9XC@U\\idL07%6G;;cT\ClqV'Q+q[0s.cJRC(cg<-(Y(*kH>X-bl!Z%OS[PC>F<(!-PI$7>^EODb^ii(9kD(WlW
%%:n1Ye/0eUcjd)kl]-_&XceBC\Z\$teCO6.Cc3Z`OUI>uX/7_(-e]ir7S5,HPQkf:aXP#Qdu.sk^u4UBKeSpMmC&422d(rH8dDc3
%KF0h_QfhHVM%4)_;9Cd"!BHC-K`nDt:g7*)I'YM`)t(K""b]GjH]*`)Z356$,7eY%F44W?%&TR$6bqh,;]n9STrOd`<\K9nLn^Q4
%E%P3HOP:fk<#(YT7LB?9R_s]s`t6N95u__sFf6c<^XW_GV!kQa4@'lC1kC6T,>I3#^=#U]"Hh-N;3pbR&n'Ce'"%Ro+Oedh@C"<i
%ZF#lpRVsCZ9"$6oiOIerg5_q^H;.EiN0^d/V.^%%D(0(3=)P2W;C_cGQIJDR+RrU(ocXF+@WKK,;aSJH%1NqBh'9X+6KD3bOau[p
%(CTT>'&lMS6UAKjiOHg-8Vm5Cc+4XELh/'80PNV$!&\jp-s.r_9*"$CD4WB`<kU?"C!dn4"gW%l#Zk,r>+gpcO6V?UbPf5@'Sk*k
%GqMc]b!^au)TX/^EZ'gcR0HT^.TMVk1F.W-DSk^p'Y%R^F^e:AHG&H`jlnb4.4^k2Dan]&3@/WuVNR-?i9DeOQ0,C\VJ,PK!YcJT
%BqF,#jq$2Vq8a/s%Ys7_K23^Op39^@YoQi1.h+C.34M/l]Ke3^#Z*p'YfXbu^%&bB!1AjJRO\i;'u49UP6a@V&o:Hb:!H1N%8jMA
%Dj'Xmo[cX*#4H(#bQTWrCB!qV1ot^jq<1`]V(bDm25]mnQ_6*;Un&ZO^+olA[-Yc0AMHL9.:c^4g9DuVFmm<uEm`?Q"6ra3Jp)ae
%9Ue[1cIG0o-6Z]])f)5i`(U5fXk.clk!^`0E=5>E]op-4gQ\XZND5?;%AO(eKSG><3?fB]+Z%'a2%7u&.im"k)K)6[;K*!ZBXf?:
%"ZP$m3ptA?`6J+Wite:5DP;&,gd:+ui"d?.iKg,^DQ.amDQ.cA\<YX-\5f^[E&4VkLT>53TPGVY+U:E^RDM_<q:Z><H]SE,Tg;#Z
%W$=N!!).56'paT/S(f;o3=4ZCe40g1"?3eGFPP)$d;]PM5UAWe!-I#Ob#"J%BqgJ6&4\$1MEU6LKp?'n/JU'MW<boOUY)?0@]=%.
%Kit,b<$72nI?jlsfH]emg<Q"bHS_&P@7B<kq*pVa?gD:6p2FMQL%gbK/)R;2ip.jrm[e*'\IXmU=1hCA`RbF/_EUn/KbG+K.tO^f
%peWW@HR,\[FBbKY_F-+/=cE7j=bN<1kj'qng.L`n6V`*c$]q6ah#&SCK[Q$K(2T^=+FT1_O<.:+1oJ?M,*QRP6#"msascU*+?c<j
%&X5bd5UK3,752e4UCg1OoSAAKW$3^B:_ppFEKsst<CUCm!CbusP+[c3#\;(KP6>GV,uI-?:BARFMFNWHmfXj651FtW[.ao?![+n4
%FGiJbK`hNnL65&E3J6HFh$gXFkgBek@Du)G&M!Xo$?R8)%p(ag-l$)eOnB83i[F.QQ,o[l.+P")XdunX_'02SA&.SICE^>Y*/3@i
%85"c;S\j>UWQ5:DHLMPZ*/,9.&m7ki%FeE&=RFU9$:Cm8QGlFrKbRi;NZt^f%@$BZ;*21E&uD<@W"r64M(jr6N)PQaTnip<.k"@Y
%D$>W]<SA<V%$.iG_FqgEGS)EfeIu7ND=o/H75dtH4(0H53!qlF7:/';%9*mF4)O)4kH9'7#&5Y9]L2gT)'c7a:3c05Q'3U2?Vq+S
%%9*]]QHJbh1luK+[8>,?H-N^]'=K2d*ggEU=&/Pff]O/rD<6H&86\+%Z24m?>WLa^;PTl=;=(i+<Q_YE0\TC@NV4d&r.1d;i[eU0
%,d%Ou33Tj..gcE+&+b]qMe@`H0TKs"i+I_I?+Us*1EATAKO0E2U_V[nkrH0^nJHq/_gu!&Cm1JgOq.+6\="rV$eR1n[V`6J9hXgl
%`*0a>pgn/$$#Rk`SS;7VO(Fq,-K"B"$4_:h2^O7Kmj'St*"o>jd-dSm,l%W/N!BOXAYNq\GOOcM<R/N'eSYNPX7NYaEEYXH/21XA
%>2[kQ<#qclq/!fW"K&X)-^rG=m`_Goh@=Pc1NQ&H^]LTD#m5h]V'd1_K".0)d%5fN+Wb!Ck6B!_^;,9^!V%N[^p^34B+M=NS<E`9
%moMmY*bN3Cl@]]iVN`30780NYd>PHk2Vt6ag(5'VEreVA#uL^cG4J+9YadG&*'+b6irg9N2;!G^cjK;K`fsDYZCh2FPF_j.m/0\u
%iDQ6p5HG?-%e2Jn17c'#@B-=I6aSSWn^]SY(-'jp1:br!LU8Ltb<EeL,^i=4%P"/H"WTYfe7J!d-T\Ji5?TOE680M1B77!6Oe3C1
%Ce36ce@cVZ6p^ql5Nt-L<QGt99^t%__;^h[IZV:#kCun&BumTL6f0$+d`EC_ealh$$U+Ge_:2>0#mR6I%ORg:2G7"M0SbZf7B;**
%ECk3?cs69db7oZkZk*N>'G#Ld!1RiCd%lDmc3DWT5_3Q\&oZEA<.Ep5:]]?&/n(c7*(-G<[jb$EOe%T+>_6B63][M7:Epj#@K[+\
%gN]Nd@mVQ1=?V:L"Tj3PC`#$qR"fCdQ6er?[-;[9rd_6s-6-9^6?].Eb#:k,h>pQ`@XLcJ=%EO8?52rjNW>t,p4O\BV3#X*_/s*D
%^cXU-:mWKoi+R.>b!5saGbdU'A!lOMahf#>`.OJ)ZL@;,(Y@--EVlp]7/GL<>K6fQK>L9,7sG"6T"KW2FG@s=I/>c4pFXO?a7ED"
%&dk#X!nKUm+J*O,`X1=/UuM?NM)Ii_R$_k'4d,g7/]rqU.__tU&(W"ZM-:!hc50-T;_X]cZ^>*635/Xl5uN;/4CK0pPl.EoTc?Vj
%R5)flH\ZN<C9/[=jN/*rA^dV=Cm[7c@g(3,dnHXSS9%'U.=]3n%pamW\1uYCYaqqRdU_p$BTRh,.?">D.`AWrAKc420k-i9EZpu_
%9k4[!)'G:lKo*h[bIOmf0k"H.!`k?PVD5L$_rDU(!"2aYU]O6_bk3=n-s8ro'ule!]2\kc6d^gL*qZXOdmjU]gC`[cLm/A)O<("<
%#W\,(%'@CB=HlRE\f6]1oE)+aB/kioFs+_gJ\Xk[5Cj^Zr[WsL4HE^HGk_JZ'Q-'A9dq/_N_aI2k0Li`Nf,.!Ef_93<fDMaL=0dG
%oZH0KA`.QQ\GmTM%V>l)PZ5[.KuK'+G::q&Ac.90'5q\GM014%6VVG`Ka+#\,_0)IGgqn0WK@`I2'N(RZB3I80\"B+TghD)H66cf
%--UTt3m1ch$TJfJPBdU^#X9rLi>KUp/_4<DJP&$``%ttrnVB4*,R(!X&nuV<m3]!WPWU1CC'rAliHWV1<24)[m1a9kBp/1"$>gY>
%/lHc$+JdK/^fm[k]p&He2k6EI\!cO&H8`rXV=Qlr)DfB!*-"`Oa@<U$4L?<:(!u[LE>5Rp%n>.nl<n];2"@5KqTrecK5:%A+,M25
%(b$Uj4qf&BXVeW65%11<d1Kbg4@UG'7^kO5*I0,c%1]2X,!&F!c!&<qTj19[;K*3Q2ilqVY6Y^FUEblGOi:KX(C9=qad=CrHAcpT
%?2BGNMMj([5^UZUr"s"`&;7t%!O:,lko(*h[&LS[-OBC((D;5^TM$'lYW.+uKk$\dB)"B2M@CR;8\Mpc8_5*US9,4[cUgXnn;5'B
%254<jn8oCuG72A4Zsj676O/,#fqnm<'@4)93U-=4bp]T5dKt_"LL\k*YnMdG0eIRs!<QLB]A6B*Uf/Xc^-smCS9.pu`']Wk-j^T!
%@9S&V1`d^X:<fVi3imLL;S$N+&9Um^#'<s^(d^KlCuR":FG>$S*^PTA.33uF(nHmdO[[F,6jTY3C'.7C9I31Re*e,sA2Q)e4s(;u
%Op`ajN<h5"=d7Y'WBg-e*eD,b#6bLgn\>0(%=u?S=k6nA?S*scfO@a]([;Qu:#sq`"U#]_nXr2jm:&GL,@?>(->pQ@8"2!jW:&]E
%*7]J#U&mC"UHs\XR&jY"9QEP^/6Q&]Oaed+J]rL(k64@%Kb;u?*a.KZi\[r4*.1GU_m.$I^2/m1%06r`9RUIUJ1E8</jp7a!6Ypi
%j3L7;<F12!#V4D?([3>#K8JI64:@.rI!#mXacI#R585dH@3$8>kHT(0JJcY/_'<Xa(ge%VdhIoua_fpFB/j\Gg]Ss*,8_>m&qjr3
%&=)SQC27[tNO;Ul,71[:g%&6\$b$pD+ECR6@Oi^\((`7E"4<;PL4dW$.7A3f!d\s=An4qp9&l%i=t*MlSL1a;652EdPEcc:AA&Z$
%]1m'^8e_:nKJ%SC.+b&p!Yj!lo.WKNPBtkj_I\pBbW=A`pcO;n1XgIV4!DtJKd*E?P0#h0Qp5qn0DJ6gU4=O:%lC+[_A1!s,G)U^
%5b+rDSE9m.S[KmM(D*kR=!)hkT*9IjOG0mB00Bh2[;FL@Nl,Ap(hsFT:C1E]@j2l0%/@B;GY3hY\m!,uI:)GX_M/uLeW$$5AS631
%.QXR8gYoaQi.p*F$M_G:b^T'aelktj!29<uJf$=A)U]!fp8tJ',feQ2+`'QN4(LJ)X)u]@?4MVE(X7UI0ZCJGF@*GtTAQMU;`m]+
%(6\R;N^S)5!$8W6LI,AobbOUW!,1I*^_7:$a`uX,A7N^/GA(/<eOU36D$Z!q1I>rAV[IGLkUK4O"fQogV*#^>C/uFQ!DQ?qj<6%:
%$B0?b)j^mg,NE$fEJh\hg>%S2Jmf&)N<<<OQQQ4p]/DagO&po).Q_:l,:uToGm#O-q%3U1Eh<'KQ;2s)O^X0eU=`S4eIuHCT`^#Y
%:VI@lZB0f+5fa=G2OaohPmrchZQ5ZBO$6&'n3!dKfnOUs+<)IfMqAl21[jODM)"HWKq[51EjuuZ4Q\S*\.nf3"`#f(@tm%_@[H>8
%[PMg[igI^$iN>g;LU\6*alDXG\otn"V1Z[n@[>qVa:@3+&F(=^2@5"^q(1=G&@#'Big$Q=W&W9\>f<-Z?*NPZknnIq7*3tASsdGj
%o>$N203f3I2052QJetlR):Nh=$gA7\j^VQLi&XIM%tgQ`2UBHBSmj=aYXLhd(/Udp4=-Na_A:)NlMd_+W3b6cfIDGQbet'_9;lYf
%C^u*=G[Uu'!+#5>b?/1tHqkh-k7@TU?.^@sAVpk"0`I$7aHP[jLKEWsKe9ILK"`k?s6r=,Pr9Y"#,F5bE#Mu=ouU(M/o6X]93p2E
%?kut#_EDn9V9K5^"ZDa4C\P6p5#oY-oO8RtR?_',JbQS1Om@7!$[.tJ&&rJ.`RM&&;1b)@N/^/L;5T5,foF+i-ks%!QEL:^V1gqh
%2P.10P<@M$\@Upl]S%q9\SYRYa88bF)*<ktN`)U4"NY/GWPW,`-s;FjXGnbEa5S?mSYcX<*,_q-R<O2joFMR0l4Y^;n!..<<1n#[
%>"H`nTog2=Uu2J-0q=l`X(=dOdB/6``E?STLJBXE\QQmS3074GTiFnol41)#U[A[`.^";2S$DfJ$1Uq1j3]*idrSd3@-\,[$jQ\!
%d1L)qkq]U$7gB%A8-asZ4@f`\j=j#RV5P1<fe>io#+jP)c@plUIpj?,e$5\V*T5k,C7#_+#k/BaXI%%(HW0uL0$5T0bO47TJ;#@G
%,5Z)q+ZUP.Y.,sGqfb`sifn2>qi#=9B]4j:`qF[$C0UeuSdIh39A+-U`-KrW03J:jndU9$/RUKog40Zo6b#j6M[j`j[oQb7K6<o0
%!45Y6;A.u5(6@&Nr1J+acmbU(&]\mD]X6'AL$q^d/_FBn[>pc&#ncSU#)KWq+I[l#qMJRgi4Ie=-@)k-<$<GQ0n5^rA4%-3peJm?
%Z]m_T1DqZeAglMBUd87sh,Lb?_=3=+M_tr)cm8l!681Ql6pMbjL/#!ZqG7q@:+%)Gm^bHpAZ^cuVDt)cOHODEiG9X;SnR)">-i9u
%;\\f$@qo-4>Z0[NU>4cQQ?5f?6UJTS.32>ll:3EXr)1EGRrO*s.Nf>l<#$(<Vr>u;R2WlZ_q`LmInF31oI]0sWf\r>e;/\f?E.%b
%40#)lPa@9%PjhQS;"mkm$>)hS$J\9ci_,c(\<eZg\sKE3j'F3%_S?PTQ\r<;7Y$;]C@I4Gb"FU2OV?9$oMQ-Ik]3b_;uKY4;Lo/=
%T,RWn,NYPT)_RA)Wa1:Or)6USH^_H_"rEgF!"IpQ"uIULF/*=9,Xgac)OAC[Gh(9u;aXc3OhRE\Xh#pRbDqF;plFZ)rGsLN3Tc"7
%St4506"3,D($NYCcbslMMOeiX`=*>u70QMuU,W24N1sQS9o2DjPVrd"J`_F0jWf?EO;^6STmNR`^CGI0aWZqe:=N2aSC0">8o^1r
%+VHsec"4aJP<dWfT&uB6f#7)+h9nj[KPsIA1'bC3WYcI\kA:Qaj3FV^d3oN*!1!RU[ksM(%^Eib2=7?3MPD2g7!P\/D+H<[f.PL^
%e;=S4dpRK+"5%GW-/tb1[<t3ggf.9r2o\,M3G!M&#D+j0\9+d3E*n$%_ZjqD"`9e;/=l*O`s\@g27B!%(SFe;%hH'16KNmU7JoB(
%?!WNI[LmouOT2O<"rs;8og)JRqdcHN@),#82t+TBB'U:9H]@]q7K.^Xk2XZ^=5NeiJBj0s8W#lT%M+>80KY.<jH9\"<>bMINqEK`
%;d[10N4a]aCT</_"S_+g>%\9`f;=0a%W92qMKB<Pm>:N_mV\Kn=0e;28I%.heo&aU5L-.ZF2S.$Z.b"AArHE`ea+/,%\k(#h?B$o
%*#>W\\BL:96Ts%/[*r69Gah<?cS,Hd]a18Y0T<_<1<c8f'fj%,>&S,LCdHM#g8*gh/UPlUb!_1XO==TnZW$4A9NXTD3*OlYV;$rm
%=0_3eg$91mlc3Z#VbGTV')aj.>Qd*7)*;A&*Nd<EeMM6K1+<L$_@KCs&%fL9+ZlWm@^a@!jOc-kjO\eK,)/l2"sLqTZC2ir5$%,m
%<p/tfDa`e-!gbM4%"!L4=1:n/%*8a>W.3:5T5tKjI9$rb]4O)^g(Y,%ZQauDV%*ZM^U7kq).fh8"VF1d3ll^rLa\0QD(18`Op)H>
%9Ec"s6C`<25m2X4&tEQ""MlXF^qD]JR<f,=]#*BO#lL9q0P!=75oeWoa<:PN0Z4Y;7'\3bR@2t6O-cOpO>YNq$%rLgC2LNf+=lF[
%$7!\s4?8ns,)VoMSn&E:qj:pe2isn,94V<2ZF!7BW/Eo)q8M6OkTYgn>spG(?%h:>DflFn"Feb3Mn01G=Vh*8[$9'/80[mSWWa&*
%!3)9@SAGR0k_*k'Kb73-ImLpm&]kZBAEL3_6k'u!'@QLYM6)n+_lb1B0ptEAj`Urq"9?OoSlHDJ6.VtIT#ij5l@p[PL`*DOo>h1h
%Q3f@7T>gPW&m9ulZ/L\?T\k)c#F3i"-L'_:puWuXK%!$Pn>(]B?]Ya)1T,kk<JK=;KA_OF9Njs=+S"@:F;JN;_.O[PFDWJ:',`'$
%Xk?_l+bT9E-'iL*85:Vd7]HcJ$prjCTj8u_'YW>ET[#!F$qaRCo18>gpEfkZ9bSBirk2'BO?oh7bW;7&,*9p>A7]9_&6i?Y]FVq[
%_9!g6b./iO#ku4oK*u^qj+>.l\KE_2/Rr`cg0#ap;n<H\`Waa!1D^b>kq!A%>KPq;?ENR1b?PVTJ;Y+p$I\3$LGqj2L^uGDTO_*Z
%9q\eq;b!5,,'-%*,fp@mc36YaYA/;BX7gU>OEPVNeg7hUs5g$AFHH.m=uXkq16S_><2Y@FIZr>2+2gNKa9Uhu@E8["1M;"fh@2dr
%&=IbU8q:m@bng/@&>JWW&B[?C$)'%o6>5oFFiF_ZQRXeJ,iOC^G+9+uR81:(dgC+^H1jO!.*S1pK%OaBJeD5l3W:]g69<@n[U=bb
%.L@`L#k></cJJ4308+Q;.FcHIa]i(TcpI;3,2X_EO!C&.8nQ68aOFWK)1Z=uQRrKo&pI;kj"tHn(@lKHne51t7OtYW.@;uQn4KAA
%&*O:h;_6fgSQq4IFMOBk^h%)fUDTn:G<;jK$;RMb/gOj&l]I#JJg?67j+L!so0dkSELmGB.m"ios.HppBMKcK:FqL7c((k.;irGJ
%De(SdcN[/Z<mDAtPDEV#bR"Z/G*39%+rO=!/.nkU^4M9(op^rN:)0V&3]-'^Ulc0e;>q&f.O%Cn#_a5OPQA^pd2:_r/,%Hq;riR&
%0L]^"$)T,pVJ*rVX]%]$'mO8h8;agV@o,Unkk3;Ql2!E?8>bHCSiKdrB6j<M3h_G*eX\2TRbas;A7edQOE$Q1/k-T7iFC:G#ZW-M
%>K8IS+UhbaI[?/pq`SfWQl',n:+9h50]g2%@o,U@Hi'LW5o!gW[2G+$>`j-rED0W",99i"B$M.MMZIO%+Hj@TqFc@XG"t)",f,u!
%DduoVA>Uc6F=)r^4_i?#,)Ht)0H!``?+=c<'PVb.`up7qA>1K?),Z&WaaPr,M9ome?oiJ,1S.,a00\S[:IHlB+FJ%KclloaAM$#?
%VX$tjd@j)EA\W;T.'/@S67=UVDF8t0L+Zq^ObR]]ROApJ=M)aZQ$_s]Vi$Ql@+CRO>r&5n18Kmg"DPjpPM%*^p,+;[OaJ,@fZ$_0
%KM6FGAqM#7C-\qAF^8i2!<Ih7!fgCD/,Nn@=jmcdV4-:mL6.%enF5]M!,rT<%YKG^9b1!Z[+V5WJQ*@`FWAR'6_!Nr;9Gl?I`aT_
%"e5\I[Lc_s[?4$917s@0!&T7KqIKpj@?tnK8[?f'l,LSN2OIDfUV>pl!bltNP`o)SMRl2[<SOb&3o<n>LqJb9lmiE$+`Tt,CT=Zi
%_LNID-O]*^35\5]ohf)!<"4mdU9+kcE8_V2L(V66j!(?(_,QdrQH"*p!E)H-Tu*VcbcG:2S+>&EXf:c6j-brVO=6e/8tk3Z%5Y21
%9u&riN255C6;TRS]b^F8a=FUr3Qk`'8*o%t<hHI`3'klm2$6Qg@(.#0#n(hTk`c]&8$S,_]:;k]c&'Q\e1G;/,]XmkfU^T3E4NPT
%2kAAXfuH\Md)S`Dd!84KA032$'4t#*d)X8oA032&6Q^NtL+Z4DGrRO&E"Y6SE$oh7J!8NYJ!8NYj-&':rp@X!=;ba=mj=-dS!a(2
%M&eXZ'0FmT8aM+q'0C;Q&j+dSS_0WKPM)YQP1dsK9kGcsSCsTOPM+'\II'>!bYIkJ1-9RiE]/%,5f0u4F6=mX6anALPF\2m:7+%S
%j5(eAo'QM6]?0EDkZ9XSS5oGhAuEm:WIoc2e+cJ;cPdl*mATP(%<K),pu"1]!9&$';Bh7P#r<rE5\=Yg%sm#YV=B*ApDP.M4Xlpa
%4HRtt1T,?K&8Vif;(5JJ.%B7)a6(HUZW$Y++`U,kjuCeo3FV&d:)igBDULOI#<F>^`2."r/GU95V`TT.Ymn8>jdrb;Xb7+;/.Q!%
%Vs]\0Uf7"!l"HS@1I=RLX-oZDq*V@R&M0o.jLS:aY`tK\U7]gm/QR1M'ksoeR_Zq,MM#V'#P7?3agL6n:Np%e29BuDKMsSmAY#ud
%IVnh:]NL!-+#nQ+@$!>B!7c?hlqJBdaPJc7Nl`amBr+SdK3,?`WI-D_l;Tt8GV!KJcX:\.b%V_WB[-.uK??\ScD:#n;)>8#qV!rP
%ZOD08DGW:>:l"2GS2Bbu\k+!4TPb_X<X+1_Vt*-Ef#beh!(UPES@e<b,Ij4"_?Ag1AkpK*3SHOsG\%,FNteWnq4sb:6Na4OB;qB/
%E)AiuRtb0'=lg=!:?j/b4/n]'F6]W>et#CgaN7HfPttg27ns8HW1D($jtTAkO1=)SAF9XLUNJ&Y]t*;VPu$48F[kMjY-)V]k/NOD
%\I#SgqL@a/4t+m#<;B&ql;TsGiS:D[LihEHQl11%@'!<&!#^hI+77!Ljb%bS3gC5<Nk>ZS-ZA][[WEu@m5>37&,Xd(HR!)aW-ejT
%/L12/fHF2YBJ!J-lr61@.FL0.opi`&.q<0V=_*eYr7XHuUS"opnk%q,<pt'0kPqINR27mS]%CFc_VJ0thYX.P=4-e^8`Oa1G^O97
%%^a#<A@LHmUn*_)mrAcdOeW9X],X*W7ET5sSUJ6\O>9Da#i")XkuI&Z\WFfr/)bnX_>lZCK,:g$K6,-:*7HMWhL5eAq7U3CY7Y0A
%.HFfWT,tgq%:1=[&]':?MWWbg^oZc-4Et9P\To5Xb"rjCe]Wnkh%:$$7X5)EAfIH5W4#EX.&Bf'5?fU#M*#9tDqMa31=7ZMKO`Cd
%&,VI8oNAb+.6/Y-9eWqUBeeJQ:V`e<PDBP]M%Pi)B8`nl3komWK5I%9dgYI]jPb.#[U7=KAB_pe.ZN,M`J,=4<mfj;7qa$Ho9gWP
%k*bTeafLT^G:m+B>$B(#I[,IAD;BE?%U&uY/[.g+?!c37RLfu>PldX^;3;J4"c&A_eXhc,j"86m6JjTg?9oU[pS.&]9+/-RK\V]t
%1_h+6fUsZ7jb\KV)Ob-8LfpCA_E_F_aH9lHfT:,!XNGa@eRi/CGd&I#$"RtW`SY;!$C,1'iJso@pL]a.N@-BBRs>N9k&'g!do[:(
%]!"T-BQ>mO81Tj.cr1`c3TZC:@ZXUP[!57UM198tU'hmD71bGXd&V@O&#'HGWH3rkEUYq40SuMEl([AqoCs.S1=S</aR&+I%7,*.
%,t65?.3:ojLLLr<B's,>0Yrm,dUeSP]j2n#=;OLE-.3utk"rrT3fcgjUVk=9kl"(.3\l`PJShFr+>o1Fd3kc3OFo#.a"5,AJ"r@:
%f6eK5QP02:(f96-@p(kplEYZ+%%/B`AJ[t.JVD#Z9t#GOiCAp&!O\0U6%F5%;]&e4a1LsI4q",Y$+c(XWInKd\eitB;b+3A%d)ND
%PNt48)L0^K3,aq-M$5mC]A$K!;m:A;bZ.4$UML`E3uB,`*E7\-+a"^r(fD14(`620/L""6;OO1>JYN]i&Q?:\ZCo<B,Gkr$O-\ft
%7.r7Ep)u:cKonQ.C.VGjD(2FOlK:GjR\=Rs$EBl#%Lm_EC#ic#mD%$PeIG'U>ZT\LQB8,aC)9jerKYb!W7hK>LoSpK'<uMDH+])+
%[3^UYo%N6*&$(Vb]8K0JiTm0Ddrfm^,+s&sk.Vo]HbnM"Y2'^Mk]Lrie?4q3:d.DEFO.O/>\hgai]=.i<%0iCR:Ehl;ch.B]]mf,
%;N+2^;U%P?./I8UBja?\f-gLa)Zboc30927^J2Nf?[]@W#B^;>K?B8amDshp^V"mkq"2%VQ`#lTT5PhO\G6Ldg#l7O?G4+c]t\jg
%qX&Itp=#@`a/>Cc&&3Vnp$9m"NurgtqVgR4YT:!&q\e.4GQ2j8>!Oe.7JNbMcOXC,p*E`YnF).%=9!Smr:p**c-&%a?=,>"IsV.a
%FGo.Ijb-D6`g(I+p!(D'e&*Ohs""(AB.^cCZNIDgemEn&r9LuL5OKSBr,DsJr:BX"h9V.k+7JY>^]3`>fA$>\h;!JYN*j<rZN'1O
%_rKS)Vh`=)S$0Rir"fWViXIPIr:H&bJ,e@)!*'G'MZ~>
%AI9_PrivateDataEnd
